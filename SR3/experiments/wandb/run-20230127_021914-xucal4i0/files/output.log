23-01-27 02:19:15.087 - INFO: Initial Dataset Finished
23-01-27 02:19:16.082 - INFO: Initialization method [orthogonal]
23-01-27 02:19:21.966 - INFO: Network G structure: GaussianDiffusion, with parameters: 92,555,202
23-01-27 02:19:21.967 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (noise_level_mlp): Sequential(
      (0): PositionalEncoding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (downs): ModuleList(
      (0): Conv2d(4, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (3): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (6): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (9): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (12): Downsample(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
          (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (12): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (15): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (16): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (17): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (18): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (loss_func): L1Loss()
)
23-01-27 02:19:21.967 - INFO: Model [DDPM] is created.
23-01-27 02:19:21.968 - INFO: Initial Model Finished
23-01-27 02:19:40.459 - INFO: <epoch:  1, iter:      50> l_pix: 7.8019e-01
23-01-27 02:19:54.967 - INFO: <epoch:  1, iter:     100> l_pix: 7.2896e-01
23-01-27 02:20:10.323 - INFO: <epoch:  2, iter:     150> l_pix: 7.1703e-01
23-01-27 02:20:24.937 - INFO: <epoch:  2, iter:     200> l_pix: 7.7292e-01
23-01-27 02:20:40.271 - INFO: <epoch:  3, iter:     250> l_pix: 5.9209e-01
23-01-27 02:20:54.571 - INFO: <epoch:  3, iter:     300> l_pix: 6.0886e-01
23-01-27 02:21:09.607 - INFO: <epoch:  4, iter:     350> l_pix: 4.9860e-01
23-01-27 02:21:23.945 - INFO: <epoch:  4, iter:     400> l_pix: 6.3706e-01
23-01-27 02:21:39.512 - INFO: <epoch:  5, iter:     450> l_pix: 7.0145e-01
23-01-27 02:21:53.797 - INFO: <epoch:  5, iter:     500> l_pix: 3.9396e-01
23-01-27 02:22:08.280 - INFO: <epoch:  5, iter:     550> l_pix: 3.7961e-01
23-01-27 02:22:23.463 - INFO: <epoch:  6, iter:     600> l_pix: 3.4738e-01
23-01-27 02:22:37.942 - INFO: <epoch:  6, iter:     650> l_pix: 3.5700e-01
23-01-27 02:22:53.232 - INFO: <epoch:  7, iter:     700> l_pix: 3.0536e-01
23-01-27 02:23:07.980 - INFO: <epoch:  7, iter:     750> l_pix: 2.9387e-01
23-01-27 02:23:23.287 - INFO: <epoch:  8, iter:     800> l_pix: 2.9486e-01
23-01-27 02:23:37.686 - INFO: <epoch:  8, iter:     850> l_pix: 2.8290e-01
23-01-27 02:23:52.895 - INFO: <epoch:  9, iter:     900> l_pix: 2.7490e-01
23-01-27 02:24:07.367 - INFO: <epoch:  9, iter:     950> l_pix: 2.5613e-01
23-01-27 02:24:22.568 - INFO: <epoch: 10, iter:   1,000> l_pix: 2.9446e-01
23-01-27 02:24:36.997 - INFO: <epoch: 10, iter:   1,050> l_pix: 2.4613e-01
23-01-27 02:24:51.622 - INFO: <epoch: 10, iter:   1,100> l_pix: 2.4507e-01
23-01-27 02:25:07.071 - INFO: <epoch: 11, iter:   1,150> l_pix: 2.3570e-01
23-01-27 02:25:21.651 - INFO: <epoch: 11, iter:   1,200> l_pix: 2.4389e-01
23-01-27 02:25:36.794 - INFO: <epoch: 12, iter:   1,250> l_pix: 4.5295e-01
23-01-27 02:25:51.351 - INFO: <epoch: 12, iter:   1,300> l_pix: 3.8177e-01
23-01-27 02:26:06.464 - INFO: <epoch: 13, iter:   1,350> l_pix: 2.6001e-01
23-01-27 02:26:21.018 - INFO: <epoch: 13, iter:   1,400> l_pix: 2.1477e-01
23-01-27 02:26:36.193 - INFO: <epoch: 14, iter:   1,450> l_pix: 2.1734e-01
23-01-27 02:26:50.604 - INFO: <epoch: 14, iter:   1,500> l_pix: 3.2753e-01
23-01-27 02:27:05.691 - INFO: <epoch: 15, iter:   1,550> l_pix: 2.0597e-01
23-01-27 02:27:20.204 - INFO: <epoch: 15, iter:   1,600> l_pix: 2.0840e-01
23-01-27 02:27:34.713 - INFO: <epoch: 15, iter:   1,650> l_pix: 2.4014e-01
23-01-27 02:27:50.097 - INFO: <epoch: 16, iter:   1,700> l_pix: 3.7611e-01
23-01-27 02:28:04.821 - INFO: <epoch: 16, iter:   1,750> l_pix: 1.9470e-01
23-01-27 02:28:20.021 - INFO: <epoch: 17, iter:   1,800> l_pix: 1.8981e-01
23-01-27 02:28:34.535 - INFO: <epoch: 17, iter:   1,850> l_pix: 2.5111e-01
23-01-27 02:28:49.767 - INFO: <epoch: 18, iter:   1,900> l_pix: 1.9488e-01
23-01-27 02:29:04.341 - INFO: <epoch: 18, iter:   1,950> l_pix: 1.8177e-01
23-01-27 02:29:19.538 - INFO: <epoch: 19, iter:   2,000> l_pix: 1.8040e-01
23-01-27 02:29:33.977 - INFO: <epoch: 19, iter:   2,050> l_pix: 1.8463e-01
23-01-27 02:29:49.207 - INFO: <epoch: 20, iter:   2,100> l_pix: 2.2385e-01
23-01-27 02:30:03.672 - INFO: <epoch: 20, iter:   2,150> l_pix: 2.4415e-01
23-01-27 02:30:18.156 - INFO: <epoch: 20, iter:   2,200> l_pix: 2.4018e-01
23-01-27 02:30:33.389 - INFO: <epoch: 21, iter:   2,250> l_pix: 2.8893e-01
23-01-27 02:30:47.904 - INFO: <epoch: 21, iter:   2,300> l_pix: 4.0962e-01
23-01-27 02:31:03.201 - INFO: <epoch: 22, iter:   2,350> l_pix: 1.7356e-01
23-01-27 02:31:17.745 - INFO: <epoch: 22, iter:   2,400> l_pix: 1.8472e-01
23-01-27 02:31:32.967 - INFO: <epoch: 23, iter:   2,450> l_pix: 1.6931e-01
23-01-27 02:31:47.414 - INFO: <epoch: 23, iter:   2,500> l_pix: 5.8706e-01
23-01-27 02:32:02.725 - INFO: <epoch: 24, iter:   2,550> l_pix: 1.6324e-01
23-01-27 02:32:17.458 - INFO: <epoch: 24, iter:   2,600> l_pix: 1.6735e-01
23-01-27 02:32:32.680 - INFO: <epoch: 25, iter:   2,650> l_pix: 3.6973e-01
23-01-27 02:32:47.182 - INFO: <epoch: 25, iter:   2,700> l_pix: 2.1773e-01
23-01-27 02:33:01.615 - INFO: <epoch: 25, iter:   2,750> l_pix: 1.8585e-01
23-01-27 02:33:17.342 - INFO: <epoch: 26, iter:   2,800> l_pix: 1.6830e-01
23-01-27 02:33:31.853 - INFO: <epoch: 26, iter:   2,850> l_pix: 2.3269e-01
23-01-27 02:33:47.176 - INFO: <epoch: 27, iter:   2,900> l_pix: 1.5249e-01
23-01-27 02:34:01.657 - INFO: <epoch: 27, iter:   2,950> l_pix: 1.5609e-01
23-01-27 02:34:16.698 - INFO: <epoch: 28, iter:   3,000> l_pix: 3.4805e-01
23-01-27 02:34:30.969 - INFO: <epoch: 28, iter:   3,050> l_pix: 1.8150e-01
23-01-27 02:34:45.978 - INFO: <epoch: 29, iter:   3,100> l_pix: 1.7989e-01
23-01-27 02:35:00.266 - INFO: <epoch: 29, iter:   3,150> l_pix: 1.5545e-01
23-01-27 02:35:15.309 - INFO: <epoch: 30, iter:   3,200> l_pix: 1.4584e-01
23-01-27 02:35:29.807 - INFO: <epoch: 30, iter:   3,250> l_pix: 5.3820e-01
23-01-27 02:35:44.215 - INFO: <epoch: 30, iter:   3,300> l_pix: 1.7431e-01
23-01-27 02:35:59.430 - INFO: <epoch: 31, iter:   3,350> l_pix: 1.4385e-01
23-01-27 02:36:13.804 - INFO: <epoch: 31, iter:   3,400> l_pix: 1.4244e-01
23-01-27 02:36:28.995 - INFO: <epoch: 32, iter:   3,450> l_pix: 1.5590e-01
23-01-27 02:36:43.380 - INFO: <epoch: 32, iter:   3,500> l_pix: 1.5079e-01
23-01-27 02:36:58.533 - INFO: <epoch: 33, iter:   3,550> l_pix: 3.0174e-01
23-01-27 02:37:12.919 - INFO: <epoch: 33, iter:   3,600> l_pix: 1.4818e-01
23-01-27 02:37:28.074 - INFO: <epoch: 34, iter:   3,650> l_pix: 1.3923e-01
23-01-27 02:37:42.545 - INFO: <epoch: 34, iter:   3,700> l_pix: 4.4640e-01
23-01-27 02:37:57.683 - INFO: <epoch: 35, iter:   3,750> l_pix: 1.5250e-01
23-01-27 02:38:12.079 - INFO: <epoch: 35, iter:   3,800> l_pix: 1.6493e-01
23-01-27 02:38:26.573 - INFO: <epoch: 35, iter:   3,850> l_pix: 1.3501e-01
23-01-27 02:38:41.685 - INFO: <epoch: 36, iter:   3,900> l_pix: 1.3576e-01
23-01-27 02:38:56.130 - INFO: <epoch: 36, iter:   3,950> l_pix: 1.3598e-01
23-01-27 02:39:11.306 - INFO: <epoch: 37, iter:   4,000> l_pix: 1.3838e-01
23-01-27 02:39:25.710 - INFO: <epoch: 37, iter:   4,050> l_pix: 1.8011e-01
23-01-27 02:39:41.041 - INFO: <epoch: 38, iter:   4,100> l_pix: 2.6320e-01
23-01-27 02:39:55.506 - INFO: <epoch: 38, iter:   4,150> l_pix: 1.3058e-01
23-01-27 02:40:10.688 - INFO: <epoch: 39, iter:   4,200> l_pix: 1.3207e-01
23-01-27 02:40:25.150 - INFO: <epoch: 39, iter:   4,250> l_pix: 2.1061e-01
23-01-27 02:40:40.424 - INFO: <epoch: 40, iter:   4,300> l_pix: 1.2658e-01
23-01-27 02:40:55.012 - INFO: <epoch: 40, iter:   4,350> l_pix: 1.3285e-01
23-01-27 02:41:09.437 - INFO: <epoch: 40, iter:   4,400> l_pix: 2.9020e-01
23-01-27 02:41:24.662 - INFO: <epoch: 41, iter:   4,450> l_pix: 1.2812e-01
23-01-27 02:41:39.072 - INFO: <epoch: 41, iter:   4,500> l_pix: 1.7947e-01
23-01-27 02:41:54.223 - INFO: <epoch: 42, iter:   4,550> l_pix: 1.2352e-01
23-01-27 02:42:08.675 - INFO: <epoch: 42, iter:   4,600> l_pix: 2.3782e-01
23-01-27 02:42:23.850 - INFO: <epoch: 43, iter:   4,650> l_pix: 3.9090e-01
23-01-27 02:42:38.360 - INFO: <epoch: 43, iter:   4,700> l_pix: 1.2241e-01
23-01-27 02:42:53.597 - INFO: <epoch: 44, iter:   4,750> l_pix: 1.2617e-01
23-01-27 02:43:08.036 - INFO: <epoch: 44, iter:   4,800> l_pix: 1.2353e-01
23-01-27 02:43:23.233 - INFO: <epoch: 45, iter:   4,850> l_pix: 1.1869e-01
23-01-27 02:43:37.749 - INFO: <epoch: 45, iter:   4,900> l_pix: 1.2046e-01
23-01-27 02:43:52.215 - INFO: <epoch: 45, iter:   4,950> l_pix: 1.1960e-01
23-01-27 02:44:07.403 - INFO: <epoch: 46, iter:   5,000> l_pix: 1.2630e-01
23-01-27 02:44:21.967 - INFO: <epoch: 46, iter:   5,050> l_pix: 1.2090e-01
23-01-27 02:44:37.136 - INFO: <epoch: 47, iter:   5,100> l_pix: 3.7816e-01
23-01-27 02:44:51.599 - INFO: <epoch: 47, iter:   5,150> l_pix: 1.3285e-01
23-01-27 02:45:06.822 - INFO: <epoch: 48, iter:   5,200> l_pix: 1.1779e-01
23-01-27 02:45:21.281 - INFO: <epoch: 48, iter:   5,250> l_pix: 4.5535e-01
23-01-27 02:45:36.506 - INFO: <epoch: 49, iter:   5,300> l_pix: 1.1739e-01
23-01-27 02:45:50.949 - INFO: <epoch: 49, iter:   5,350> l_pix: 1.1387e-01
23-01-27 02:46:06.095 - INFO: <epoch: 50, iter:   5,400> l_pix: 2.1173e-01
23-01-27 02:46:20.537 - INFO: <epoch: 50, iter:   5,450> l_pix: 1.1540e-01
23-01-27 02:46:35.131 - INFO: <epoch: 50, iter:   5,500> l_pix: 1.1086e-01
23-01-27 02:46:50.376 - INFO: <epoch: 51, iter:   5,550> l_pix: 2.2494e-01
23-01-27 02:47:04.779 - INFO: <epoch: 51, iter:   5,600> l_pix: 1.1715e-01
23-01-27 02:47:19.953 - INFO: <epoch: 52, iter:   5,650> l_pix: 2.1494e-01
23-01-27 02:47:34.290 - INFO: <epoch: 52, iter:   5,700> l_pix: 1.1404e-01
23-01-27 02:47:49.369 - INFO: <epoch: 53, iter:   5,750> l_pix: 8.0654e-01
23-01-27 02:48:03.682 - INFO: <epoch: 53, iter:   5,800> l_pix: 1.1140e-01
23-01-27 02:48:18.732 - INFO: <epoch: 54, iter:   5,850> l_pix: 1.2670e-01
23-01-27 02:48:33.077 - INFO: <epoch: 54, iter:   5,900> l_pix: 4.9850e-01
23-01-27 02:48:48.074 - INFO: <epoch: 55, iter:   5,950> l_pix: 1.8304e-01
23-01-27 02:49:02.433 - INFO: <epoch: 55, iter:   6,000> l_pix: 6.2423e-01
23-01-27 02:49:16.833 - INFO: <epoch: 55, iter:   6,050> l_pix: 1.0925e-01
23-01-27 02:49:31.993 - INFO: <epoch: 56, iter:   6,100> l_pix: 1.1980e-01
23-01-27 02:49:46.473 - INFO: <epoch: 56, iter:   6,150> l_pix: 1.1358e-01
23-01-27 02:50:01.651 - INFO: <epoch: 57, iter:   6,200> l_pix: 2.1161e-01
23-01-27 02:50:16.126 - INFO: <epoch: 57, iter:   6,250> l_pix: 2.8847e-01
23-01-27 02:50:31.274 - INFO: <epoch: 58, iter:   6,300> l_pix: 1.0502e-01
23-01-27 02:50:45.694 - INFO: <epoch: 58, iter:   6,350> l_pix: 1.6815e-01
23-01-27 02:51:00.863 - INFO: <epoch: 59, iter:   6,400> l_pix: 1.0586e-01
23-01-27 02:51:15.323 - INFO: <epoch: 59, iter:   6,450> l_pix: 1.0381e-01
23-01-27 02:51:30.536 - INFO: <epoch: 60, iter:   6,500> l_pix: 1.3452e-01
23-01-27 02:51:44.948 - INFO: <epoch: 60, iter:   6,550> l_pix: 1.0428e-01
23-01-27 02:51:59.339 - INFO: <epoch: 60, iter:   6,600> l_pix: 1.0480e-01
23-01-27 02:52:14.671 - INFO: <epoch: 61, iter:   6,650> l_pix: 1.0571e-01
23-01-27 02:52:29.453 - INFO: <epoch: 61, iter:   6,700> l_pix: 1.8261e-01
23-01-27 02:52:44.652 - INFO: <epoch: 62, iter:   6,750> l_pix: 1.0394e-01
23-01-27 02:52:59.092 - INFO: <epoch: 62, iter:   6,800> l_pix: 2.9583e-01
23-01-27 02:53:14.227 - INFO: <epoch: 63, iter:   6,850> l_pix: 1.0569e-01
23-01-27 02:53:28.659 - INFO: <epoch: 63, iter:   6,900> l_pix: 1.0103e-01
23-01-27 02:53:43.861 - INFO: <epoch: 64, iter:   6,950> l_pix: 8.6619e-01
23-01-27 02:53:58.307 - INFO: <epoch: 64, iter:   7,000> l_pix: 2.3393e-01
23-01-27 02:54:13.481 - INFO: <epoch: 65, iter:   7,050> l_pix: 1.0084e-01
23-01-27 02:54:27.955 - INFO: <epoch: 65, iter:   7,100> l_pix: 1.0650e-01
23-01-27 02:54:42.409 - INFO: <epoch: 65, iter:   7,150> l_pix: 9.9564e-02
23-01-27 02:54:57.550 - INFO: <epoch: 66, iter:   7,200> l_pix: 1.0388e-01
23-01-27 02:55:11.983 - INFO: <epoch: 66, iter:   7,250> l_pix: 1.3365e-01
23-01-27 02:55:27.097 - INFO: <epoch: 67, iter:   7,300> l_pix: 1.1177e-01
23-01-27 02:55:41.459 - INFO: <epoch: 67, iter:   7,350> l_pix: 1.1893e-01
23-01-27 02:55:56.723 - INFO: <epoch: 68, iter:   7,400> l_pix: 2.0057e-01
23-01-27 02:56:11.154 - INFO: <epoch: 68, iter:   7,450> l_pix: 9.7499e-02
23-01-27 02:56:26.514 - INFO: <epoch: 69, iter:   7,500> l_pix: 9.9996e-02
23-01-27 02:56:41.171 - INFO: <epoch: 69, iter:   7,550> l_pix: 2.8370e-01
23-01-27 02:56:56.325 - INFO: <epoch: 70, iter:   7,600> l_pix: 1.2861e-01
23-01-27 02:57:10.755 - INFO: <epoch: 70, iter:   7,650> l_pix: 9.8487e-02
23-01-27 02:57:25.152 - INFO: <epoch: 70, iter:   7,700> l_pix: 9.6756e-02
23-01-27 02:57:40.331 - INFO: <epoch: 71, iter:   7,750> l_pix: 1.0156e-01
23-01-27 02:57:54.776 - INFO: <epoch: 71, iter:   7,800> l_pix: 2.1358e-01
23-01-27 02:58:09.911 - INFO: <epoch: 72, iter:   7,850> l_pix: 9.8386e-02
23-01-27 02:58:24.473 - INFO: <epoch: 72, iter:   7,900> l_pix: 9.7346e-02
23-01-27 02:58:39.669 - INFO: <epoch: 73, iter:   7,950> l_pix: 9.7076e-02
23-01-27 02:58:54.193 - INFO: <epoch: 73, iter:   8,000> l_pix: 9.8410e-02
23-01-27 02:59:09.413 - INFO: <epoch: 74, iter:   8,050> l_pix: 9.6055e-02
23-01-27 02:59:23.999 - INFO: <epoch: 74, iter:   8,100> l_pix: 1.0916e-01
23-01-27 02:59:39.196 - INFO: <epoch: 75, iter:   8,150> l_pix: 1.0055e-01
23-01-27 02:59:53.665 - INFO: <epoch: 75, iter:   8,200> l_pix: 9.6048e-02
23-01-27 03:00:08.143 - INFO: <epoch: 75, iter:   8,250> l_pix: 3.5999e-01
23-01-27 03:00:23.439 - INFO: <epoch: 76, iter:   8,300> l_pix: 1.1850e-01
23-01-27 03:00:38.076 - INFO: <epoch: 76, iter:   8,350> l_pix: 2.0005e-01
23-01-27 03:00:53.668 - INFO: <epoch: 77, iter:   8,400> l_pix: 9.2168e-02
23-01-27 03:01:08.024 - INFO: <epoch: 77, iter:   8,450> l_pix: 1.3095e-01
23-01-27 03:01:23.087 - INFO: <epoch: 78, iter:   8,500> l_pix: 9.2025e-02
23-01-27 03:01:37.919 - INFO: <epoch: 78, iter:   8,550> l_pix: 9.7614e-02
23-01-27 03:01:53.181 - INFO: <epoch: 79, iter:   8,600> l_pix: 9.2192e-02
23-01-27 03:02:07.695 - INFO: <epoch: 79, iter:   8,650> l_pix: 9.2565e-02
23-01-27 03:02:22.940 - INFO: <epoch: 80, iter:   8,700> l_pix: 1.0118e-01
23-01-27 03:02:37.426 - INFO: <epoch: 80, iter:   8,750> l_pix: 9.4905e-02
23-01-27 03:02:52.054 - INFO: <epoch: 80, iter:   8,800> l_pix: 9.3320e-02
23-01-27 03:03:07.311 - INFO: <epoch: 81, iter:   8,850> l_pix: 8.9734e-02
23-01-27 03:03:21.809 - INFO: <epoch: 81, iter:   8,900> l_pix: 9.5826e-02
23-01-27 03:03:37.112 - INFO: <epoch: 82, iter:   8,950> l_pix: 2.5248e-01
23-01-27 03:03:51.538 - INFO: <epoch: 82, iter:   9,000> l_pix: 9.1938e-02
23-01-27 03:04:06.767 - INFO: <epoch: 83, iter:   9,050> l_pix: 9.5423e-02
23-01-27 03:04:21.264 - INFO: <epoch: 83, iter:   9,100> l_pix: 1.0731e-01
23-01-27 03:04:36.534 - INFO: <epoch: 84, iter:   9,150> l_pix: 2.6639e-01
23-01-27 03:04:51.107 - INFO: <epoch: 84, iter:   9,200> l_pix: 1.0479e-01
23-01-27 03:05:06.369 - INFO: <epoch: 85, iter:   9,250> l_pix: 8.9798e-02
23-01-27 03:05:20.822 - INFO: <epoch: 85, iter:   9,300> l_pix: 2.4095e-01
23-01-27 03:05:35.240 - INFO: <epoch: 85, iter:   9,350> l_pix: 8.9926e-02
23-01-27 03:05:50.397 - INFO: <epoch: 86, iter:   9,400> l_pix: 9.2299e-02
23-01-27 03:06:04.797 - INFO: <epoch: 86, iter:   9,450> l_pix: 9.1220e-02
23-01-27 03:06:20.065 - INFO: <epoch: 87, iter:   9,500> l_pix: 8.9072e-02
23-01-27 03:06:34.460 - INFO: <epoch: 87, iter:   9,550> l_pix: 8.6054e-02
23-01-27 03:06:49.648 - INFO: <epoch: 88, iter:   9,600> l_pix: 1.7749e-01
23-01-27 03:07:04.287 - INFO: <epoch: 88, iter:   9,650> l_pix: 8.9686e-02
23-01-27 03:07:19.604 - INFO: <epoch: 89, iter:   9,700> l_pix: 8.9387e-02
23-01-27 03:07:34.205 - INFO: <epoch: 89, iter:   9,750> l_pix: 1.4802e-01
23-01-27 03:07:49.848 - INFO: <epoch: 90, iter:   9,800> l_pix: 8.7445e-02
23-01-27 03:08:04.979 - INFO: <epoch: 90, iter:   9,850> l_pix: 8.9465e-02
23-01-27 03:08:19.938 - INFO: <epoch: 90, iter:   9,900> l_pix: 9.0438e-02
23-01-27 03:08:35.164 - INFO: <epoch: 91, iter:   9,950> l_pix: 1.5945e-01
23-01-27 03:08:49.633 - INFO: <epoch: 91, iter:  10,000> l_pix: 8.9837e-02


















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:36<00:00, 54.17it/s]
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 143, in <module>
    wandb_logger.log_image(
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/core/wandb_logger.py", line 60, in log_image
    self._wandb.log({key_name: self._wandb.Image(image_array)})
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 153, in __init__
    self._initialize_from_data(data_or_path, mode)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 282, in _initialize_from_data
    self.to_uint8(data), mode=mode or self.guess_mode(data)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 428, in guess_mode
    raise ValueError(
ValueError: Un-supported shape for image conversion [128, 384, 2]
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 143, in <module>
    wandb_logger.log_image(
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/core/wandb_logger.py", line 60, in log_image
    self._wandb.log({key_name: self._wandb.Image(image_array)})
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 153, in __init__
    self._initialize_from_data(data_or_path, mode)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 282, in _initialize_from_data
    self.to_uint8(data), mode=mode or self.guess_mode(data)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 428, in guess_mode
    raise ValueError(
ValueError: Un-supported shape for image conversion [128, 384, 2]