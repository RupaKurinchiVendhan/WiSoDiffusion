23-01-27 03:29:45.913 - INFO: Initial Dataset Finished
23-01-27 03:29:46.910 - INFO: Initialization method [orthogonal]
23-01-27 03:29:53.242 - INFO: Network G structure: GaussianDiffusion, with parameters: 92,555,202
23-01-27 03:29:53.243 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (noise_level_mlp): Sequential(
      (0): PositionalEncoding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (downs): ModuleList(
      (0): Conv2d(4, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (3): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (6): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (9): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (12): Downsample(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
          (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (12): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (15): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (16): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (17): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (18): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (loss_func): L1Loss()
)
23-01-27 03:29:53.244 - INFO: Model [DDPM] is created.
23-01-27 03:29:53.244 - INFO: Initial Model Finished
23-01-27 03:30:11.751 - INFO: <epoch:  1, iter:      50> l_pix: 8.2655e-01
23-01-27 03:30:26.183 - INFO: <epoch:  1, iter:     100> l_pix: 7.5989e-01
23-01-27 03:30:41.449 - INFO: <epoch:  2, iter:     150> l_pix: 7.3057e-01
23-01-27 03:30:55.874 - INFO: <epoch:  2, iter:     200> l_pix: 7.6209e-01
23-01-27 03:31:11.115 - INFO: <epoch:  3, iter:     250> l_pix: 6.3984e-01
23-01-27 03:31:25.817 - INFO: <epoch:  3, iter:     300> l_pix: 7.0557e-01
23-01-27 03:31:41.126 - INFO: <epoch:  4, iter:     350> l_pix: 5.4788e-01
23-01-27 03:31:55.629 - INFO: <epoch:  4, iter:     400> l_pix: 5.0899e-01
23-01-27 03:32:10.972 - INFO: <epoch:  5, iter:     450> l_pix: 5.3248e-01
23-01-27 03:32:25.430 - INFO: <epoch:  5, iter:     500> l_pix: 4.2819e-01
23-01-27 03:32:39.907 - INFO: <epoch:  5, iter:     550> l_pix: 3.9978e-01
23-01-27 03:32:55.655 - INFO: <epoch:  6, iter:     600> l_pix: 3.6895e-01
23-01-27 03:33:10.124 - INFO: <epoch:  6, iter:     650> l_pix: 3.4789e-01
23-01-27 03:33:25.507 - INFO: <epoch:  7, iter:     700> l_pix: 4.7426e-01
23-01-27 03:33:40.132 - INFO: <epoch:  7, iter:     750> l_pix: 3.4862e-01
23-01-27 03:33:55.420 - INFO: <epoch:  8, iter:     800> l_pix: 2.9827e-01
23-01-27 03:34:10.571 - INFO: <epoch:  8, iter:     850> l_pix: 2.9204e-01
23-01-27 03:34:26.111 - INFO: <epoch:  9, iter:     900> l_pix: 2.8251e-01
23-01-27 03:34:40.772 - INFO: <epoch:  9, iter:     950> l_pix: 2.8640e-01
23-01-27 03:34:56.373 - INFO: <epoch: 10, iter:   1,000> l_pix: 7.0031e-01
23-01-27 03:35:11.061 - INFO: <epoch: 10, iter:   1,050> l_pix: 4.5263e-01
23-01-27 03:35:25.565 - INFO: <epoch: 10, iter:   1,100> l_pix: 2.5215e-01
23-01-27 03:35:40.855 - INFO: <epoch: 11, iter:   1,150> l_pix: 2.4369e-01
23-01-27 03:35:55.280 - INFO: <epoch: 11, iter:   1,200> l_pix: 2.3372e-01
23-01-27 03:36:10.555 - INFO: <epoch: 12, iter:   1,250> l_pix: 2.2836e-01
23-01-27 03:36:25.054 - INFO: <epoch: 12, iter:   1,300> l_pix: 2.2597e-01
23-01-27 03:36:40.447 - INFO: <epoch: 13, iter:   1,350> l_pix: 6.0573e-01
23-01-27 03:36:55.036 - INFO: <epoch: 13, iter:   1,400> l_pix: 4.9819e-01
23-01-27 03:37:10.484 - INFO: <epoch: 14, iter:   1,450> l_pix: 2.1262e-01
23-01-27 03:37:24.925 - INFO: <epoch: 14, iter:   1,500> l_pix: 2.8068e-01
23-01-27 03:37:40.234 - INFO: <epoch: 15, iter:   1,550> l_pix: 2.4885e-01
23-01-27 03:37:54.700 - INFO: <epoch: 15, iter:   1,600> l_pix: 2.0473e-01
23-01-27 03:38:09.289 - INFO: <epoch: 15, iter:   1,650> l_pix: 2.0420e-01
23-01-27 03:38:24.720 - INFO: <epoch: 16, iter:   1,700> l_pix: 1.9725e-01
23-01-27 03:38:39.365 - INFO: <epoch: 16, iter:   1,750> l_pix: 2.0100e-01
23-01-27 03:38:54.878 - INFO: <epoch: 17, iter:   1,800> l_pix: 1.9593e-01
23-01-27 03:39:09.435 - INFO: <epoch: 17, iter:   1,850> l_pix: 1.9074e-01
23-01-27 03:39:24.790 - INFO: <epoch: 18, iter:   1,900> l_pix: 6.3639e-01
23-01-27 03:39:39.303 - INFO: <epoch: 18, iter:   1,950> l_pix: 7.0525e-01
23-01-27 03:39:54.467 - INFO: <epoch: 19, iter:   2,000> l_pix: 1.9787e-01
23-01-27 03:40:08.821 - INFO: <epoch: 19, iter:   2,050> l_pix: 5.0410e-01
23-01-27 03:40:24.105 - INFO: <epoch: 20, iter:   2,100> l_pix: 2.0660e-01
23-01-27 03:40:38.582 - INFO: <epoch: 20, iter:   2,150> l_pix: 1.7720e-01
23-01-27 03:40:52.975 - INFO: <epoch: 20, iter:   2,200> l_pix: 1.7934e-01
23-01-27 03:41:08.303 - INFO: <epoch: 21, iter:   2,250> l_pix: 1.8299e-01
23-01-27 03:41:22.747 - INFO: <epoch: 21, iter:   2,300> l_pix: 2.2969e-01
23-01-27 03:41:38.051 - INFO: <epoch: 22, iter:   2,350> l_pix: 1.7203e-01
23-01-27 03:41:52.580 - INFO: <epoch: 22, iter:   2,400> l_pix: 2.6418e-01
23-01-27 03:42:07.832 - INFO: <epoch: 23, iter:   2,450> l_pix: 2.2805e-01
23-01-27 03:42:22.212 - INFO: <epoch: 23, iter:   2,500> l_pix: 1.6684e-01
23-01-27 03:42:37.412 - INFO: <epoch: 24, iter:   2,550> l_pix: 2.5665e-01
23-01-27 03:42:51.929 - INFO: <epoch: 24, iter:   2,600> l_pix: 3.6227e-01
23-01-27 03:43:07.241 - INFO: <epoch: 25, iter:   2,650> l_pix: 3.0782e-01
23-01-27 03:43:21.743 - INFO: <epoch: 25, iter:   2,700> l_pix: 1.6944e-01
23-01-27 03:43:36.177 - INFO: <epoch: 25, iter:   2,750> l_pix: 1.6064e-01
23-01-27 03:43:51.450 - INFO: <epoch: 26, iter:   2,800> l_pix: 1.5773e-01
23-01-27 03:44:05.891 - INFO: <epoch: 26, iter:   2,850> l_pix: 1.5501e-01
23-01-27 03:44:21.188 - INFO: <epoch: 27, iter:   2,900> l_pix: 6.0358e-01
23-01-27 03:44:35.750 - INFO: <epoch: 27, iter:   2,950> l_pix: 1.5259e-01
23-01-27 03:44:51.054 - INFO: <epoch: 28, iter:   3,000> l_pix: 1.5037e-01
23-01-27 03:45:05.503 - INFO: <epoch: 28, iter:   3,050> l_pix: 1.5646e-01
23-01-27 03:45:20.659 - INFO: <epoch: 29, iter:   3,100> l_pix: 1.7366e-01
23-01-27 03:45:35.248 - INFO: <epoch: 29, iter:   3,150> l_pix: 1.5130e-01
23-01-27 03:45:50.503 - INFO: <epoch: 30, iter:   3,200> l_pix: 2.4384e-01
23-01-27 03:46:04.986 - INFO: <epoch: 30, iter:   3,250> l_pix: 1.4594e-01
23-01-27 03:46:19.440 - INFO: <epoch: 30, iter:   3,300> l_pix: 1.5947e-01
23-01-27 03:46:34.821 - INFO: <epoch: 31, iter:   3,350> l_pix: 7.0839e-01
23-01-27 03:46:49.337 - INFO: <epoch: 31, iter:   3,400> l_pix: 1.5264e-01
23-01-27 03:47:04.592 - INFO: <epoch: 32, iter:   3,450> l_pix: 1.4466e-01
23-01-27 03:47:19.020 - INFO: <epoch: 32, iter:   3,500> l_pix: 1.4199e-01
23-01-27 03:47:34.301 - INFO: <epoch: 33, iter:   3,550> l_pix: 1.3945e-01
23-01-27 03:47:48.740 - INFO: <epoch: 33, iter:   3,600> l_pix: 1.4320e-01
23-01-27 03:48:03.991 - INFO: <epoch: 34, iter:   3,650> l_pix: 1.5129e-01
23-01-27 03:48:18.418 - INFO: <epoch: 34, iter:   3,700> l_pix: 1.3862e-01
23-01-27 03:48:33.692 - INFO: <epoch: 35, iter:   3,750> l_pix: 1.3482e-01
23-01-27 03:48:48.131 - INFO: <epoch: 35, iter:   3,800> l_pix: 1.3972e-01
23-01-27 03:49:02.484 - INFO: <epoch: 35, iter:   3,850> l_pix: 6.5785e-01
23-01-27 03:49:17.764 - INFO: <epoch: 36, iter:   3,900> l_pix: 1.3915e-01
23-01-27 03:49:32.236 - INFO: <epoch: 36, iter:   3,950> l_pix: 3.2024e-01
23-01-27 03:49:47.504 - INFO: <epoch: 37, iter:   4,000> l_pix: 1.9112e-01
23-01-27 03:50:01.904 - INFO: <epoch: 37, iter:   4,050> l_pix: 2.5789e-01
23-01-27 03:50:17.346 - INFO: <epoch: 38, iter:   4,100> l_pix: 7.2457e-01
23-01-27 03:50:31.805 - INFO: <epoch: 38, iter:   4,150> l_pix: 2.4455e-01
23-01-27 03:50:46.979 - INFO: <epoch: 39, iter:   4,200> l_pix: 1.3421e-01
23-01-27 03:51:01.358 - INFO: <epoch: 39, iter:   4,250> l_pix: 1.3425e-01
23-01-27 03:51:16.580 - INFO: <epoch: 40, iter:   4,300> l_pix: 1.3425e-01
23-01-27 03:51:31.015 - INFO: <epoch: 40, iter:   4,350> l_pix: 1.3565e-01
23-01-27 03:51:45.380 - INFO: <epoch: 40, iter:   4,400> l_pix: 1.3180e-01
23-01-27 03:52:00.619 - INFO: <epoch: 41, iter:   4,450> l_pix: 3.9226e-01
23-01-27 03:52:14.990 - INFO: <epoch: 41, iter:   4,500> l_pix: 1.3091e-01
23-01-27 03:52:30.215 - INFO: <epoch: 42, iter:   4,550> l_pix: 1.2951e-01
23-01-27 03:52:44.642 - INFO: <epoch: 42, iter:   4,600> l_pix: 1.9317e-01
23-01-27 03:52:59.964 - INFO: <epoch: 43, iter:   4,650> l_pix: 1.9088e-01
23-01-27 03:53:14.463 - INFO: <epoch: 43, iter:   4,700> l_pix: 3.4458e-01
23-01-27 03:53:29.799 - INFO: <epoch: 44, iter:   4,750> l_pix: 1.2421e-01
23-01-27 03:53:44.284 - INFO: <epoch: 44, iter:   4,800> l_pix: 1.6203e-01
23-01-27 03:53:59.588 - INFO: <epoch: 45, iter:   4,850> l_pix: 1.2810e-01
23-01-27 03:54:14.085 - INFO: <epoch: 45, iter:   4,900> l_pix: 1.2480e-01
23-01-27 03:54:28.563 - INFO: <epoch: 45, iter:   4,950> l_pix: 1.1848e-01
23-01-27 03:54:43.913 - INFO: <epoch: 46, iter:   5,000> l_pix: 1.7513e-01
23-01-27 03:54:58.495 - INFO: <epoch: 46, iter:   5,050> l_pix: 1.6960e-01
23-01-27 03:55:13.751 - INFO: <epoch: 47, iter:   5,100> l_pix: 1.1694e-01
23-01-27 03:55:28.103 - INFO: <epoch: 47, iter:   5,150> l_pix: 1.2300e-01
23-01-27 03:55:43.348 - INFO: <epoch: 48, iter:   5,200> l_pix: 1.6903e-01
23-01-27 03:55:57.941 - INFO: <epoch: 48, iter:   5,250> l_pix: 2.5179e-01
23-01-27 03:56:13.256 - INFO: <epoch: 49, iter:   5,300> l_pix: 1.1427e-01
23-01-27 03:56:27.782 - INFO: <epoch: 49, iter:   5,350> l_pix: 1.1447e-01
23-01-27 03:56:43.013 - INFO: <epoch: 50, iter:   5,400> l_pix: 1.1394e-01
23-01-27 03:56:57.407 - INFO: <epoch: 50, iter:   5,450> l_pix: 1.1659e-01
23-01-27 03:57:11.825 - INFO: <epoch: 50, iter:   5,500> l_pix: 1.1784e-01
23-01-27 03:57:27.229 - INFO: <epoch: 51, iter:   5,550> l_pix: 1.1764e-01
23-01-27 03:57:41.720 - INFO: <epoch: 51, iter:   5,600> l_pix: 1.1297e-01
23-01-27 03:57:56.914 - INFO: <epoch: 52, iter:   5,650> l_pix: 1.7408e-01
23-01-27 03:58:11.307 - INFO: <epoch: 52, iter:   5,700> l_pix: 1.1718e-01
23-01-27 03:58:26.593 - INFO: <epoch: 53, iter:   5,750> l_pix: 1.1433e-01
23-01-27 03:58:41.002 - INFO: <epoch: 53, iter:   5,800> l_pix: 1.6158e-01
23-01-27 03:58:56.239 - INFO: <epoch: 54, iter:   5,850> l_pix: 1.1246e-01
23-01-27 03:59:10.654 - INFO: <epoch: 54, iter:   5,900> l_pix: 3.5716e-01
23-01-27 03:59:25.872 - INFO: <epoch: 55, iter:   5,950> l_pix: 1.1030e-01
23-01-27 03:59:40.262 - INFO: <epoch: 55, iter:   6,000> l_pix: 1.1040e-01
23-01-27 03:59:54.695 - INFO: <epoch: 55, iter:   6,050> l_pix: 1.2224e-01
23-01-27 04:00:09.953 - INFO: <epoch: 56, iter:   6,100> l_pix: 1.4169e-01
23-01-27 04:00:24.404 - INFO: <epoch: 56, iter:   6,150> l_pix: 1.0771e-01
23-01-27 04:00:39.728 - INFO: <epoch: 57, iter:   6,200> l_pix: 1.4070e-01
23-01-27 04:00:54.279 - INFO: <epoch: 57, iter:   6,250> l_pix: 1.3306e-01
23-01-27 04:01:09.585 - INFO: <epoch: 58, iter:   6,300> l_pix: 3.0956e-01
23-01-27 04:01:24.024 - INFO: <epoch: 58, iter:   6,350> l_pix: 3.6870e-01
23-01-27 04:01:39.226 - INFO: <epoch: 59, iter:   6,400> l_pix: 1.4039e-01
23-01-27 04:01:53.635 - INFO: <epoch: 59, iter:   6,450> l_pix: 1.0868e-01
23-01-27 04:02:09.050 - INFO: <epoch: 60, iter:   6,500> l_pix: 1.4307e-01
23-01-27 04:02:23.429 - INFO: <epoch: 60, iter:   6,550> l_pix: 1.0658e-01
23-01-27 04:02:37.759 - INFO: <epoch: 60, iter:   6,600> l_pix: 1.2548e-01
23-01-27 04:02:52.987 - INFO: <epoch: 61, iter:   6,650> l_pix: 1.0654e-01
23-01-27 04:03:07.429 - INFO: <epoch: 61, iter:   6,700> l_pix: 1.5532e-01
23-01-27 04:03:22.680 - INFO: <epoch: 62, iter:   6,750> l_pix: 1.0470e-01
23-01-27 04:03:37.338 - INFO: <epoch: 62, iter:   6,800> l_pix: 1.0342e-01
23-01-27 04:03:52.703 - INFO: <epoch: 63, iter:   6,850> l_pix: 2.0486e-01
23-01-27 04:04:07.305 - INFO: <epoch: 63, iter:   6,900> l_pix: 1.2314e-01
23-01-27 04:04:22.713 - INFO: <epoch: 64, iter:   6,950> l_pix: 1.0351e-01
23-01-27 04:04:37.454 - INFO: <epoch: 64, iter:   7,000> l_pix: 1.0275e-01
23-01-27 04:04:53.071 - INFO: <epoch: 65, iter:   7,050> l_pix: 1.0342e-01
23-01-27 04:05:07.654 - INFO: <epoch: 65, iter:   7,100> l_pix: 1.0117e-01
23-01-27 04:05:22.308 - INFO: <epoch: 65, iter:   7,150> l_pix: 1.0162e-01
23-01-27 04:05:37.854 - INFO: <epoch: 66, iter:   7,200> l_pix: 1.0472e-01
23-01-27 04:05:52.507 - INFO: <epoch: 66, iter:   7,250> l_pix: 1.0240e-01
23-01-27 04:06:07.858 - INFO: <epoch: 67, iter:   7,300> l_pix: 1.0191e-01
23-01-27 04:06:22.357 - INFO: <epoch: 67, iter:   7,350> l_pix: 1.8921e-01
23-01-27 04:06:37.660 - INFO: <epoch: 68, iter:   7,400> l_pix: 2.5991e-01
23-01-27 04:06:52.172 - INFO: <epoch: 68, iter:   7,450> l_pix: 9.8377e-02
23-01-27 04:07:07.429 - INFO: <epoch: 69, iter:   7,500> l_pix: 1.4498e-01
23-01-27 04:07:21.872 - INFO: <epoch: 69, iter:   7,550> l_pix: 1.0553e-01
23-01-27 04:07:37.130 - INFO: <epoch: 70, iter:   7,600> l_pix: 1.1431e-01
23-01-27 04:07:51.659 - INFO: <epoch: 70, iter:   7,650> l_pix: 1.2752e-01
23-01-27 04:08:06.235 - INFO: <epoch: 70, iter:   7,700> l_pix: 1.1407e-01
23-01-27 04:08:21.664 - INFO: <epoch: 71, iter:   7,750> l_pix: 1.0043e-01
23-01-27 04:08:36.229 - INFO: <epoch: 71, iter:   7,800> l_pix: 1.0005e-01
23-01-27 04:08:51.659 - INFO: <epoch: 72, iter:   7,850> l_pix: 9.9577e-02
23-01-27 04:09:06.238 - INFO: <epoch: 72, iter:   7,900> l_pix: 9.7447e-02
23-01-27 04:09:21.589 - INFO: <epoch: 73, iter:   7,950> l_pix: 1.8657e-01
23-01-27 04:09:36.192 - INFO: <epoch: 73, iter:   8,000> l_pix: 2.4699e-01
23-01-27 04:09:51.588 - INFO: <epoch: 74, iter:   8,050> l_pix: 9.5326e-02
23-01-27 04:10:06.132 - INFO: <epoch: 74, iter:   8,100> l_pix: 9.6622e-02
23-01-27 04:10:21.557 - INFO: <epoch: 75, iter:   8,150> l_pix: 1.5588e-01
23-01-27 04:10:36.096 - INFO: <epoch: 75, iter:   8,200> l_pix: 2.2912e-01
23-01-27 04:10:50.545 - INFO: <epoch: 75, iter:   8,250> l_pix: 1.4508e-01
23-01-27 04:11:05.928 - INFO: <epoch: 76, iter:   8,300> l_pix: 9.4683e-02
23-01-27 04:11:20.512 - INFO: <epoch: 76, iter:   8,350> l_pix: 1.9336e-01
23-01-27 04:11:35.857 - INFO: <epoch: 77, iter:   8,400> l_pix: 3.8713e-01
23-01-27 04:11:50.420 - INFO: <epoch: 77, iter:   8,450> l_pix: 1.4362e-01
23-01-27 04:12:05.716 - INFO: <epoch: 78, iter:   8,500> l_pix: 9.2930e-02
23-01-27 04:12:20.275 - INFO: <epoch: 78, iter:   8,550> l_pix: 9.3563e-02
23-01-27 04:12:35.649 - INFO: <epoch: 79, iter:   8,600> l_pix: 9.4985e-02
23-01-27 04:12:50.220 - INFO: <epoch: 79, iter:   8,650> l_pix: 2.1147e-01
23-01-27 04:13:05.480 - INFO: <epoch: 80, iter:   8,700> l_pix: 9.2272e-02
23-01-27 04:13:20.228 - INFO: <epoch: 80, iter:   8,750> l_pix: 1.1671e-01
23-01-27 04:13:34.583 - INFO: <epoch: 80, iter:   8,800> l_pix: 1.1909e-01
23-01-27 04:13:49.845 - INFO: <epoch: 81, iter:   8,850> l_pix: 9.1182e-02
23-01-27 04:14:04.373 - INFO: <epoch: 81, iter:   8,900> l_pix: 1.4732e-01
23-01-27 04:14:19.798 - INFO: <epoch: 82, iter:   8,950> l_pix: 1.2305e-01
23-01-27 04:14:34.269 - INFO: <epoch: 82, iter:   9,000> l_pix: 1.3763e-01
23-01-27 04:14:49.566 - INFO: <epoch: 83, iter:   9,050> l_pix: 1.0629e-01
23-01-27 04:15:04.031 - INFO: <epoch: 83, iter:   9,100> l_pix: 8.9816e-02
23-01-27 04:15:19.361 - INFO: <epoch: 84, iter:   9,150> l_pix: 8.9854e-02
23-01-27 04:15:33.997 - INFO: <epoch: 84, iter:   9,200> l_pix: 1.1384e-01
23-01-27 04:15:49.212 - INFO: <epoch: 85, iter:   9,250> l_pix: 1.3136e-01
23-01-27 04:16:03.732 - INFO: <epoch: 85, iter:   9,300> l_pix: 6.4787e-01
23-01-27 04:16:18.316 - INFO: <epoch: 85, iter:   9,350> l_pix: 9.0114e-02
23-01-27 04:16:33.530 - INFO: <epoch: 86, iter:   9,400> l_pix: 1.4893e-01
23-01-27 04:16:48.059 - INFO: <epoch: 86, iter:   9,450> l_pix: 1.5792e-01
23-01-27 04:17:03.360 - INFO: <epoch: 87, iter:   9,500> l_pix: 9.4624e-02
23-01-27 04:17:17.801 - INFO: <epoch: 87, iter:   9,550> l_pix: 9.1118e-02
23-01-27 04:17:33.138 - INFO: <epoch: 88, iter:   9,600> l_pix: 8.9466e-02
23-01-27 04:17:47.596 - INFO: <epoch: 88, iter:   9,650> l_pix: 9.0434e-02
23-01-27 04:18:03.140 - INFO: <epoch: 89, iter:   9,700> l_pix: 8.8541e-02
23-01-27 04:18:17.822 - INFO: <epoch: 89, iter:   9,750> l_pix: 1.8334e-01
23-01-27 04:18:33.124 - INFO: <epoch: 90, iter:   9,800> l_pix: 4.5661e-01
23-01-27 04:18:47.491 - INFO: <epoch: 90, iter:   9,850> l_pix: 8.8226e-02
23-01-27 04:19:02.328 - INFO: <epoch: 90, iter:   9,900> l_pix: 1.8304e-01
23-01-27 04:19:17.749 - INFO: <epoch: 91, iter:   9,950> l_pix: 1.4464e-01
23-01-27 04:19:32.147 - INFO: <epoch: 91, iter:  10,000> l_pix: 9.1227e-02


















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:38<00:00, 52.26it/s]



















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:39<00:00, 50.73it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 55.97it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:36<00:00, 55.05it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:36<00:00, 54.61it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:36<00:00, 55.45it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 56.17it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:36<00:00, 55.15it/s]
















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 56.94it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:34<00:00, 57.41it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 55.95it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:36<00:00, 55.26it/s]
















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:34<00:00, 57.40it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 57.08it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 56.67it/s]
















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 56.97it/s]

















sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:35<00:00, 57.07it/s]

sampling loop time step:  13%|███▋                         | 254/2000 [00:04<00:30, 56.45it/s]
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 118, in <module>
    diffusion.test(continous=False)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/model.py", line 67, in test
    self.SR = self.netG.super_resolution(
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 210, in super_resolution
    return self.p_sample_loop(x_in, continous)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 194, in p_sample_loop
    img = self.p_sample(img, i, condition_x=x)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 171, in p_sample
    model_mean, model_log_variance = self.p_mean_variance(
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 157, in p_mean_variance
    x, t=t, noise=self.denoise_fn(torch.cat([condition_x, x], dim=1), noise_level))
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/unet.py", line 255, in forward
    x = layer(torch.cat((x, feats.pop()), dim=1), t)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/unet.py", line 155, in forward
    x = self.res_block(x, time_emb)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/unet.py", line 108, in forward
    h = self.noise_func(h, time_emb)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
KeyboardInterrupt
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 118, in <module>
    diffusion.test(continous=False)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/model.py", line 67, in test
    self.SR = self.netG.super_resolution(
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 210, in super_resolution
    return self.p_sample_loop(x_in, continous)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 194, in p_sample_loop
    img = self.p_sample(img, i, condition_x=x)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 171, in p_sample
    model_mean, model_log_variance = self.p_mean_variance(
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/diffusion.py", line 157, in p_mean_variance
    x, t=t, noise=self.denoise_fn(torch.cat([condition_x, x], dim=1), noise_level))
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/unet.py", line 255, in forward
    x = layer(torch.cat((x, feats.pop()), dim=1), t)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/unet.py", line 155, in forward
    x = self.res_block(x, time_emb)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/model/sr3_modules/unet.py", line 108, in forward
    h = self.noise_func(h, time_emb)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
KeyboardInterrupt