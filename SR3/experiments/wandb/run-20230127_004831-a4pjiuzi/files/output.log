23-01-27 00:48:32.274 - INFO: Initial Dataset Finished
23-01-27 00:48:33.044 - INFO: Initialization method [orthogonal]
23-01-27 00:48:37.810 - INFO: Network G structure: GaussianDiffusion, with parameters: 92,555,202
23-01-27 00:48:37.811 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (noise_level_mlp): Sequential(
      (0): PositionalEncoding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (downs): ModuleList(
      (0): Conv2d(4, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (3): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (6): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (9): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (12): Downsample(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
          (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (12): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (15): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (16): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (17): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (18): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (loss_func): L1Loss()
)
23-01-27 00:48:37.811 - INFO: Model [DDPM] is created.
23-01-27 00:48:37.812 - INFO: Initial Model Finished
23-01-27 00:48:56.049 - INFO: <epoch:  1, iter:      50> l_pix: 7.9310e-01
23-01-27 00:49:10.323 - INFO: <epoch:  1, iter:     100> l_pix: 7.1514e-01
23-01-27 00:49:25.426 - INFO: <epoch:  2, iter:     150> l_pix: 7.5631e-01
23-01-27 00:49:40.023 - INFO: <epoch:  2, iter:     200> l_pix: 6.2859e-01
23-01-27 00:49:54.891 - INFO: <epoch:  3, iter:     250> l_pix: 6.5399e-01
23-01-27 00:50:09.079 - INFO: <epoch:  3, iter:     300> l_pix: 5.3147e-01
23-01-27 00:50:24.142 - INFO: <epoch:  4, iter:     350> l_pix: 5.4590e-01
23-01-27 00:50:38.328 - INFO: <epoch:  4, iter:     400> l_pix: 4.5953e-01
23-01-27 00:50:53.266 - INFO: <epoch:  5, iter:     450> l_pix: 4.6884e-01
23-01-27 00:51:07.457 - INFO: <epoch:  5, iter:     500> l_pix: 3.8479e-01
23-01-27 00:51:21.634 - INFO: <epoch:  5, iter:     550> l_pix: 3.5992e-01
23-01-27 00:51:36.674 - INFO: <epoch:  6, iter:     600> l_pix: 3.4297e-01
23-01-27 00:51:50.854 - INFO: <epoch:  6, iter:     650> l_pix: 3.2074e-01
23-01-27 00:52:05.886 - INFO: <epoch:  7, iter:     700> l_pix: 3.1074e-01
23-01-27 00:52:20.066 - INFO: <epoch:  7, iter:     750> l_pix: 2.9519e-01
23-01-27 00:52:35.032 - INFO: <epoch:  8, iter:     800> l_pix: 2.9119e-01
23-01-27 00:52:49.354 - INFO: <epoch:  8, iter:     850> l_pix: 2.8029e-01
23-01-27 00:53:04.363 - INFO: <epoch:  9, iter:     900> l_pix: 2.6902e-01
23-01-27 00:53:18.574 - INFO: <epoch:  9, iter:     950> l_pix: 4.2715e-01
23-01-27 00:53:33.604 - INFO: <epoch: 10, iter:   1,000> l_pix: 2.5564e-01
23-01-27 00:53:47.782 - INFO: <epoch: 10, iter:   1,050> l_pix: 2.5009e-01
23-01-27 00:54:01.920 - INFO: <epoch: 10, iter:   1,100> l_pix: 2.4988e-01
23-01-27 00:54:16.960 - INFO: <epoch: 11, iter:   1,150> l_pix: 2.6256e-01
23-01-27 00:54:31.134 - INFO: <epoch: 11, iter:   1,200> l_pix: 2.9639e-01
23-01-27 00:54:46.212 - INFO: <epoch: 12, iter:   1,250> l_pix: 3.4240e-01
23-01-27 00:55:00.448 - INFO: <epoch: 12, iter:   1,300> l_pix: 2.2510e-01
23-01-27 00:55:15.635 - INFO: <epoch: 13, iter:   1,350> l_pix: 2.5897e-01
23-01-27 00:55:29.965 - INFO: <epoch: 13, iter:   1,400> l_pix: 3.4269e-01
23-01-27 00:55:45.029 - INFO: <epoch: 14, iter:   1,450> l_pix: 2.1193e-01
23-01-27 00:55:59.360 - INFO: <epoch: 14, iter:   1,500> l_pix: 6.0647e-01
23-01-27 00:56:14.326 - INFO: <epoch: 15, iter:   1,550> l_pix: 2.6253e-01
23-01-27 00:56:28.542 - INFO: <epoch: 15, iter:   1,600> l_pix: 2.3257e-01
23-01-27 00:56:42.687 - INFO: <epoch: 15, iter:   1,650> l_pix: 1.9652e-01
23-01-27 00:56:57.814 - INFO: <epoch: 16, iter:   1,700> l_pix: 2.4117e-01
23-01-27 00:57:12.017 - INFO: <epoch: 16, iter:   1,750> l_pix: 2.4867e-01
23-01-27 00:57:27.081 - INFO: <epoch: 17, iter:   1,800> l_pix: 1.9659e-01
23-01-27 00:57:41.281 - INFO: <epoch: 17, iter:   1,850> l_pix: 2.4526e-01
23-01-27 00:57:56.308 - INFO: <epoch: 18, iter:   1,900> l_pix: 2.0852e-01
23-01-27 00:58:10.588 - INFO: <epoch: 18, iter:   1,950> l_pix: 1.8308e-01
23-01-27 00:58:25.636 - INFO: <epoch: 19, iter:   2,000> l_pix: 3.4125e-01
23-01-27 00:58:39.846 - INFO: <epoch: 19, iter:   2,050> l_pix: 1.8526e-01
23-01-27 00:58:54.816 - INFO: <epoch: 20, iter:   2,100> l_pix: 1.8130e-01
23-01-27 00:59:09.118 - INFO: <epoch: 20, iter:   2,150> l_pix: 1.7734e-01
23-01-27 00:59:23.270 - INFO: <epoch: 20, iter:   2,200> l_pix: 1.7962e-01
23-01-27 00:59:38.477 - INFO: <epoch: 21, iter:   2,250> l_pix: 1.6909e-01
23-01-27 00:59:52.836 - INFO: <epoch: 21, iter:   2,300> l_pix: 4.3250e-01
23-01-27 01:00:07.924 - INFO: <epoch: 22, iter:   2,350> l_pix: 1.7156e-01
23-01-27 01:00:22.103 - INFO: <epoch: 22, iter:   2,400> l_pix: 1.6409e-01
23-01-27 01:00:37.151 - INFO: <epoch: 23, iter:   2,450> l_pix: 1.6978e-01
23-01-27 01:00:51.330 - INFO: <epoch: 23, iter:   2,500> l_pix: 1.7245e-01
23-01-27 01:01:06.303 - INFO: <epoch: 24, iter:   2,550> l_pix: 1.6168e-01
23-01-27 01:01:20.522 - INFO: <epoch: 24, iter:   2,600> l_pix: 1.6366e-01
23-01-27 01:01:35.608 - INFO: <epoch: 25, iter:   2,650> l_pix: 1.5717e-01
23-01-27 01:01:50.654 - INFO: <epoch: 25, iter:   2,700> l_pix: 1.5635e-01
23-01-27 01:02:05.567 - INFO: <epoch: 25, iter:   2,750> l_pix: 1.5921e-01
23-01-27 01:02:20.808 - INFO: <epoch: 26, iter:   2,800> l_pix: 1.6401e-01
23-01-27 01:02:35.051 - INFO: <epoch: 26, iter:   2,850> l_pix: 1.5747e-01
23-01-27 01:02:50.060 - INFO: <epoch: 27, iter:   2,900> l_pix: 2.3649e-01
23-01-27 01:03:04.212 - INFO: <epoch: 27, iter:   2,950> l_pix: 5.1050e-01
23-01-27 01:03:19.182 - INFO: <epoch: 28, iter:   3,000> l_pix: 1.5459e-01
23-01-27 01:03:33.367 - INFO: <epoch: 28, iter:   3,050> l_pix: 1.4592e-01
23-01-27 01:03:48.422 - INFO: <epoch: 29, iter:   3,100> l_pix: 1.5611e-01
23-01-27 01:04:02.688 - INFO: <epoch: 29, iter:   3,150> l_pix: 1.5221e-01
23-01-27 01:04:17.740 - INFO: <epoch: 30, iter:   3,200> l_pix: 2.7718e-01
23-01-27 01:04:31.902 - INFO: <epoch: 30, iter:   3,250> l_pix: 2.6701e-01
23-01-27 01:04:46.025 - INFO: <epoch: 30, iter:   3,300> l_pix: 1.4909e-01
23-01-27 01:05:01.021 - INFO: <epoch: 31, iter:   3,350> l_pix: 1.4454e-01
23-01-27 01:05:15.160 - INFO: <epoch: 31, iter:   3,400> l_pix: 7.8783e-01
23-01-27 01:05:30.252 - INFO: <epoch: 32, iter:   3,450> l_pix: 1.4390e-01
23-01-27 01:05:44.475 - INFO: <epoch: 32, iter:   3,500> l_pix: 2.3952e-01
23-01-27 01:05:59.473 - INFO: <epoch: 33, iter:   3,550> l_pix: 1.4224e-01
23-01-27 01:06:13.659 - INFO: <epoch: 33, iter:   3,600> l_pix: 1.4014e-01
23-01-27 01:06:28.650 - INFO: <epoch: 34, iter:   3,650> l_pix: 3.2313e-01
23-01-27 01:06:43.122 - INFO: <epoch: 34, iter:   3,700> l_pix: 1.3647e-01
23-01-27 01:06:58.420 - INFO: <epoch: 35, iter:   3,750> l_pix: 1.5548e-01
23-01-27 01:07:12.816 - INFO: <epoch: 35, iter:   3,800> l_pix: 1.9261e-01
23-01-27 01:07:27.155 - INFO: <epoch: 35, iter:   3,850> l_pix: 1.3685e-01
23-01-27 01:07:42.229 - INFO: <epoch: 36, iter:   3,900> l_pix: 1.3137e-01
23-01-27 01:07:56.424 - INFO: <epoch: 36, iter:   3,950> l_pix: 1.3286e-01
23-01-27 01:08:11.696 - INFO: <epoch: 37, iter:   4,000> l_pix: 1.3206e-01
23-01-27 01:08:26.338 - INFO: <epoch: 37, iter:   4,050> l_pix: 1.4179e-01
23-01-27 01:08:41.613 - INFO: <epoch: 38, iter:   4,100> l_pix: 1.3026e-01
23-01-27 01:08:55.834 - INFO: <epoch: 38, iter:   4,150> l_pix: 3.2610e-01
23-01-27 01:09:10.811 - INFO: <epoch: 39, iter:   4,200> l_pix: 1.2788e-01
23-01-27 01:09:25.020 - INFO: <epoch: 39, iter:   4,250> l_pix: 1.8448e-01
23-01-27 01:09:40.224 - INFO: <epoch: 40, iter:   4,300> l_pix: 1.2767e-01
23-01-27 01:09:54.625 - INFO: <epoch: 40, iter:   4,350> l_pix: 1.3298e-01
23-01-27 01:10:08.878 - INFO: <epoch: 40, iter:   4,400> l_pix: 1.2239e-01
23-01-27 01:10:23.974 - INFO: <epoch: 41, iter:   4,450> l_pix: 1.2884e-01
23-01-27 01:10:38.663 - INFO: <epoch: 41, iter:   4,500> l_pix: 3.5241e-01
23-01-27 01:10:54.392 - INFO: <epoch: 42, iter:   4,550> l_pix: 1.2714e-01
23-01-27 01:11:08.921 - INFO: <epoch: 42, iter:   4,600> l_pix: 1.2549e-01
23-01-27 01:11:24.382 - INFO: <epoch: 43, iter:   4,650> l_pix: 1.3266e-01
23-01-27 01:11:39.224 - INFO: <epoch: 43, iter:   4,700> l_pix: 1.8545e-01
23-01-27 01:11:54.211 - INFO: <epoch: 44, iter:   4,750> l_pix: 1.2578e-01
23-01-27 01:12:08.771 - INFO: <epoch: 44, iter:   4,800> l_pix: 1.2059e-01
23-01-27 01:12:23.686 - INFO: <epoch: 45, iter:   4,850> l_pix: 3.8064e-01
23-01-27 01:12:37.855 - INFO: <epoch: 45, iter:   4,900> l_pix: 2.3218e-01
23-01-27 01:12:51.984 - INFO: <epoch: 45, iter:   4,950> l_pix: 7.1809e-01
23-01-27 01:13:07.017 - INFO: <epoch: 46, iter:   5,000> l_pix: 1.1853e-01
23-01-27 01:13:21.275 - INFO: <epoch: 46, iter:   5,050> l_pix: 1.1710e-01
23-01-27 01:13:36.287 - INFO: <epoch: 47, iter:   5,100> l_pix: 1.1864e-01
23-01-27 01:13:50.465 - INFO: <epoch: 47, iter:   5,150> l_pix: 1.2101e-01
23-01-27 01:14:05.493 - INFO: <epoch: 48, iter:   5,200> l_pix: 2.0283e-01
23-01-27 01:14:19.700 - INFO: <epoch: 48, iter:   5,250> l_pix: 1.7026e-01
23-01-27 01:14:34.724 - INFO: <epoch: 49, iter:   5,300> l_pix: 1.1859e-01
23-01-27 01:14:49.046 - INFO: <epoch: 49, iter:   5,350> l_pix: 3.4998e-01
23-01-27 01:15:04.081 - INFO: <epoch: 50, iter:   5,400> l_pix: 1.3694e-01
23-01-27 01:15:18.369 - INFO: <epoch: 50, iter:   5,450> l_pix: 1.1507e-01
23-01-27 01:15:32.565 - INFO: <epoch: 50, iter:   5,500> l_pix: 1.1638e-01
23-01-27 01:15:47.646 - INFO: <epoch: 51, iter:   5,550> l_pix: 1.1414e-01
23-01-27 01:16:01.797 - INFO: <epoch: 51, iter:   5,600> l_pix: 1.3667e-01
23-01-27 01:16:16.883 - INFO: <epoch: 52, iter:   5,650> l_pix: 1.1207e-01
23-01-27 01:16:31.109 - INFO: <epoch: 52, iter:   5,700> l_pix: 1.3234e-01
23-01-27 01:16:46.479 - INFO: <epoch: 53, iter:   5,750> l_pix: 1.1219e-01
23-01-27 01:17:00.680 - INFO: <epoch: 53, iter:   5,800> l_pix: 8.4044e-01
23-01-27 01:17:15.671 - INFO: <epoch: 54, iter:   5,850> l_pix: 2.3790e-01
23-01-27 01:17:29.828 - INFO: <epoch: 54, iter:   5,900> l_pix: 2.0620e-01
23-01-27 01:17:44.831 - INFO: <epoch: 55, iter:   5,950> l_pix: 1.1215e-01
23-01-27 01:17:58.992 - INFO: <epoch: 55, iter:   6,000> l_pix: 1.0604e-01
23-01-27 01:18:13.109 - INFO: <epoch: 55, iter:   6,050> l_pix: 1.1197e-01
23-01-27 01:18:28.155 - INFO: <epoch: 56, iter:   6,100> l_pix: 1.0535e-01
23-01-27 01:18:42.340 - INFO: <epoch: 56, iter:   6,150> l_pix: 1.0849e-01
23-01-27 01:18:57.394 - INFO: <epoch: 57, iter:   6,200> l_pix: 1.0594e-01
23-01-27 01:19:11.632 - INFO: <epoch: 57, iter:   6,250> l_pix: 1.0640e-01
23-01-27 01:19:27.002 - INFO: <epoch: 58, iter:   6,300> l_pix: 1.3108e-01
23-01-27 01:19:41.629 - INFO: <epoch: 58, iter:   6,350> l_pix: 2.5842e-01
23-01-27 01:19:57.102 - INFO: <epoch: 59, iter:   6,400> l_pix: 1.0908e-01
23-01-27 01:20:11.279 - INFO: <epoch: 59, iter:   6,450> l_pix: 1.5101e-01
23-01-27 01:20:26.270 - INFO: <epoch: 60, iter:   6,500> l_pix: 1.4682e-01
23-01-27 01:20:40.431 - INFO: <epoch: 60, iter:   6,550> l_pix: 1.1017e-01
23-01-27 01:20:54.542 - INFO: <epoch: 60, iter:   6,600> l_pix: 1.3593e-01
23-01-27 01:21:09.810 - INFO: <epoch: 61, iter:   6,650> l_pix: 1.0174e-01
23-01-27 01:21:24.735 - INFO: <epoch: 61, iter:   6,700> l_pix: 1.2039e-01
23-01-27 01:21:39.862 - INFO: <epoch: 62, iter:   6,750> l_pix: 1.0521e-01
23-01-27 01:21:54.040 - INFO: <epoch: 62, iter:   6,800> l_pix: 2.9998e-01
23-01-27 01:22:09.046 - INFO: <epoch: 63, iter:   6,850> l_pix: 1.1298e-01
23-01-27 01:22:23.172 - INFO: <epoch: 63, iter:   6,900> l_pix: 1.0176e-01
23-01-27 01:22:38.167 - INFO: <epoch: 64, iter:   6,950> l_pix: 2.4257e-01
23-01-27 01:22:52.361 - INFO: <epoch: 64, iter:   7,000> l_pix: 1.2429e-01
23-01-27 01:23:07.372 - INFO: <epoch: 65, iter:   7,050> l_pix: 1.0287e-01
23-01-27 01:23:21.770 - INFO: <epoch: 65, iter:   7,100> l_pix: 1.0079e-01
23-01-27 01:23:35.960 - INFO: <epoch: 65, iter:   7,150> l_pix: 2.5828e-01
23-01-27 01:23:51.049 - INFO: <epoch: 66, iter:   7,200> l_pix: 1.5499e-01
23-01-27 01:24:05.289 - INFO: <epoch: 66, iter:   7,250> l_pix: 1.9195e-01
23-01-27 01:24:20.295 - INFO: <epoch: 67, iter:   7,300> l_pix: 1.0045e-01
23-01-27 01:24:34.483 - INFO: <epoch: 67, iter:   7,350> l_pix: 9.9601e-02
23-01-27 01:24:49.516 - INFO: <epoch: 68, iter:   7,400> l_pix: 9.8455e-02
23-01-27 01:25:03.679 - INFO: <epoch: 68, iter:   7,450> l_pix: 9.8605e-02
23-01-27 01:25:18.640 - INFO: <epoch: 69, iter:   7,500> l_pix: 9.7180e-02
23-01-27 01:25:32.827 - INFO: <epoch: 69, iter:   7,550> l_pix: 9.8694e-02
23-01-27 01:25:47.856 - INFO: <epoch: 70, iter:   7,600> l_pix: 9.8018e-02
23-01-27 01:26:02.069 - INFO: <epoch: 70, iter:   7,650> l_pix: 1.6955e-01
23-01-27 01:26:16.222 - INFO: <epoch: 70, iter:   7,700> l_pix: 1.0634e-01
23-01-27 01:26:31.381 - INFO: <epoch: 71, iter:   7,750> l_pix: 1.0083e-01
23-01-27 01:26:45.559 - INFO: <epoch: 71, iter:   7,800> l_pix: 2.3861e-01
23-01-27 01:27:00.749 - INFO: <epoch: 72, iter:   7,850> l_pix: 2.2760e-01
23-01-27 01:27:15.075 - INFO: <epoch: 72, iter:   7,900> l_pix: 5.5254e-01
23-01-27 01:27:30.188 - INFO: <epoch: 73, iter:   7,950> l_pix: 9.5250e-02
23-01-27 01:27:44.427 - INFO: <epoch: 73, iter:   8,000> l_pix: 9.3362e-02
23-01-27 01:27:59.457 - INFO: <epoch: 74, iter:   8,050> l_pix: 9.1614e-02
23-01-27 01:28:13.802 - INFO: <epoch: 74, iter:   8,100> l_pix: 9.3893e-02
23-01-27 01:28:28.914 - INFO: <epoch: 75, iter:   8,150> l_pix: 9.2426e-02
23-01-27 01:28:43.059 - INFO: <epoch: 75, iter:   8,200> l_pix: 2.4012e-01
23-01-27 01:28:57.181 - INFO: <epoch: 75, iter:   8,250> l_pix: 9.3821e-02
23-01-27 01:29:12.259 - INFO: <epoch: 76, iter:   8,300> l_pix: 9.3851e-02
23-01-27 01:29:26.390 - INFO: <epoch: 76, iter:   8,350> l_pix: 9.3161e-02
23-01-27 01:29:41.493 - INFO: <epoch: 77, iter:   8,400> l_pix: 1.4073e-01
23-01-27 01:29:55.768 - INFO: <epoch: 77, iter:   8,450> l_pix: 9.3086e-02
23-01-27 01:30:10.779 - INFO: <epoch: 78, iter:   8,500> l_pix: 8.8728e-02
23-01-27 01:30:25.035 - INFO: <epoch: 78, iter:   8,550> l_pix: 9.4901e-02
23-01-27 01:30:40.424 - INFO: <epoch: 79, iter:   8,600> l_pix: 9.2201e-02
23-01-27 01:30:55.373 - INFO: <epoch: 79, iter:   8,650> l_pix: 9.1695e-02
23-01-27 01:31:10.789 - INFO: <epoch: 80, iter:   8,700> l_pix: 1.0042e-01
23-01-27 01:31:25.610 - INFO: <epoch: 80, iter:   8,750> l_pix: 9.0408e-02
23-01-27 01:31:40.211 - INFO: <epoch: 80, iter:   8,800> l_pix: 1.2001e-01
23-01-27 01:31:55.245 - INFO: <epoch: 81, iter:   8,850> l_pix: 9.7743e-02
23-01-27 01:32:09.463 - INFO: <epoch: 81, iter:   8,900> l_pix: 8.9344e-02
23-01-27 01:32:24.507 - INFO: <epoch: 82, iter:   8,950> l_pix: 9.3197e-02
23-01-27 01:32:38.685 - INFO: <epoch: 82, iter:   9,000> l_pix: 1.2416e-01
23-01-27 01:32:54.097 - INFO: <epoch: 83, iter:   9,050> l_pix: 1.2934e-01
23-01-27 01:33:09.053 - INFO: <epoch: 83, iter:   9,100> l_pix: 9.0451e-02
23-01-27 01:33:24.119 - INFO: <epoch: 84, iter:   9,150> l_pix: 8.6504e-02
23-01-27 01:33:38.310 - INFO: <epoch: 84, iter:   9,200> l_pix: 1.4226e-01
23-01-27 01:33:53.318 - INFO: <epoch: 85, iter:   9,250> l_pix: 1.3157e-01
23-01-27 01:34:07.629 - INFO: <epoch: 85, iter:   9,300> l_pix: 8.7119e-02
23-01-27 01:34:21.815 - INFO: <epoch: 85, iter:   9,350> l_pix: 2.4291e-01
23-01-27 01:34:36.896 - INFO: <epoch: 86, iter:   9,400> l_pix: 3.0767e-01
23-01-27 01:34:51.091 - INFO: <epoch: 86, iter:   9,450> l_pix: 8.9144e-02
23-01-27 01:35:06.103 - INFO: <epoch: 87, iter:   9,500> l_pix: 1.0669e-01
23-01-27 01:35:20.231 - INFO: <epoch: 87, iter:   9,550> l_pix: 8.4701e-02
23-01-27 01:35:35.266 - INFO: <epoch: 88, iter:   9,600> l_pix: 8.8756e-02
23-01-27 01:35:49.627 - INFO: <epoch: 88, iter:   9,650> l_pix: 1.4665e-01
23-01-27 01:36:04.685 - INFO: <epoch: 89, iter:   9,700> l_pix: 8.7081e-02
23-01-27 01:36:18.969 - INFO: <epoch: 89, iter:   9,750> l_pix: 8.8505e-02
23-01-27 01:36:33.987 - INFO: <epoch: 90, iter:   9,800> l_pix: 1.7518e-01
23-01-27 01:36:48.189 - INFO: <epoch: 90, iter:   9,850> l_pix: 1.4439e-01
23-01-27 01:37:02.375 - INFO: <epoch: 90, iter:   9,900> l_pix: 1.5843e-01
23-01-27 01:37:17.533 - INFO: <epoch: 91, iter:   9,950> l_pix: 1.8004e-01
23-01-27 01:37:31.788 - INFO: <epoch: 91, iter:  10,000> l_pix: 8.4653e-02














sampling loop time step: 100%|████████████████████████████| 2000/2000 [00:30<00:00, 66.45it/s]
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 140, in <module>
    np.transpose(np.concatenate(
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 4 dimension(s) and the array at index 1 has 3 dimension(s)
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 140, in <module>
    np.transpose(np.concatenate(
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 4 dimension(s) and the array at index 1 has 3 dimension(s)