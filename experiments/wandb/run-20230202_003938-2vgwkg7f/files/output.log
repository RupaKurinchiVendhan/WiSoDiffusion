23-02-02 00:39:38.751 - INFO: Initial Dataset Finished
23-02-02 00:39:39.465 - INFO: Initialization method [orthogonal]
23-02-02 00:39:44.309 - INFO: Network G structure: GaussianDiffusion, with parameters: 92,555,202
23-02-02 00:39:44.309 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (noise_level_mlp): Sequential(
      (0): PositionalEncoding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (downs): ModuleList(
      (0): Conv2d(4, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (3): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (6): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (9): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (12): Downsample(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 512, eps=1e-05, affine=True)
          (qkv): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 1024, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=512, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (8): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 768, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=256, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (11): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (12): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (13): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (14): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=128, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (15): Upsample(
        (up): Upsample(scale_factor=2.0, mode=nearest)
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (16): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (17): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (18): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (noise_func): FeatureWiseAffine(
            (noise_func): Sequential(
              (0): Linear(in_features=64, out_features=64, bias=True)
            )
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Dropout(p=0.2, inplace=False)
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (loss_func): L1Loss()
)
23-02-02 00:39:44.311 - INFO: Model [DDPM] is created.
23-02-02 00:39:44.311 - INFO: Initial Model Finished
23-02-02 00:40:02.662 - INFO: <epoch:  1, iter:      50> l_pix: 7.7882e-01
23-02-02 00:40:16.806 - INFO: <epoch:  1, iter:     100> l_pix: 7.1940e-01
23-02-02 00:40:31.829 - INFO: <epoch:  2, iter:     150> l_pix: 6.7248e-01
23-02-02 00:40:46.072 - INFO: <epoch:  2, iter:     200> l_pix: 6.4093e-01
23-02-02 00:41:01.206 - INFO: <epoch:  3, iter:     250> l_pix: 6.8379e-01
23-02-02 00:41:15.507 - INFO: <epoch:  3, iter:     300> l_pix: 7.3896e-01
23-02-02 00:41:30.556 - INFO: <epoch:  4, iter:     350> l_pix: 4.9551e-01
23-02-02 00:41:44.926 - INFO: <epoch:  4, iter:     400> l_pix: 4.5271e-01
23-02-02 00:42:00.255 - INFO: <epoch:  5, iter:     450> l_pix: 4.8979e-01
23-02-02 00:42:15.371 - INFO: <epoch:  5, iter:     500> l_pix: 3.8463e-01
23-02-02 00:42:30.251 - INFO: <epoch:  5, iter:     550> l_pix: 3.7179e-01
23-02-02 00:42:46.154 - INFO: <epoch:  6, iter:     600> l_pix: 3.2929e-01
23-02-02 00:43:00.972 - INFO: <epoch:  6, iter:     650> l_pix: 3.1833e-01
23-02-02 00:43:16.487 - INFO: <epoch:  7, iter:     700> l_pix: 3.0483e-01
23-02-02 00:43:30.772 - INFO: <epoch:  7, iter:     750> l_pix: 4.6328e-01
23-02-02 00:43:45.988 - INFO: <epoch:  8, iter:     800> l_pix: 2.7794e-01
23-02-02 00:44:00.231 - INFO: <epoch:  8, iter:     850> l_pix: 3.4863e-01
23-02-02 00:44:15.330 - INFO: <epoch:  9, iter:     900> l_pix: 2.6575e-01
23-02-02 00:44:29.578 - INFO: <epoch:  9, iter:     950> l_pix: 2.5972e-01
23-02-02 00:44:44.675 - INFO: <epoch: 10, iter:   1,000> l_pix: 2.9049e-01
23-02-02 00:44:58.919 - INFO: <epoch: 10, iter:   1,050> l_pix: 2.4068e-01
23-02-02 00:45:13.069 - INFO: <epoch: 10, iter:   1,100> l_pix: 2.3830e-01
23-02-02 00:45:28.197 - INFO: <epoch: 11, iter:   1,150> l_pix: 2.3348e-01
23-02-02 00:45:42.423 - INFO: <epoch: 11, iter:   1,200> l_pix: 2.3128e-01
23-02-02 00:45:57.529 - INFO: <epoch: 12, iter:   1,250> l_pix: 2.3008e-01
23-02-02 00:46:11.816 - INFO: <epoch: 12, iter:   1,300> l_pix: 2.2360e-01
23-02-02 00:46:26.853 - INFO: <epoch: 13, iter:   1,350> l_pix: 2.1139e-01
23-02-02 00:46:41.088 - INFO: <epoch: 13, iter:   1,400> l_pix: 6.9098e-01
23-02-02 00:46:56.199 - INFO: <epoch: 14, iter:   1,450> l_pix: 2.0719e-01
23-02-02 00:47:10.429 - INFO: <epoch: 14, iter:   1,500> l_pix: 8.2353e-01
23-02-02 00:47:25.552 - INFO: <epoch: 15, iter:   1,550> l_pix: 4.3868e-01
23-02-02 00:47:39.964 - INFO: <epoch: 15, iter:   1,600> l_pix: 2.2717e-01
23-02-02 00:47:54.223 - INFO: <epoch: 15, iter:   1,650> l_pix: 2.0176e-01
23-02-02 00:48:09.303 - INFO: <epoch: 16, iter:   1,700> l_pix: 1.9366e-01
23-02-02 00:48:23.490 - INFO: <epoch: 16, iter:   1,750> l_pix: 1.9273e-01
23-02-02 00:48:38.625 - INFO: <epoch: 17, iter:   1,800> l_pix: 1.8730e-01
23-02-02 00:48:52.889 - INFO: <epoch: 17, iter:   1,850> l_pix: 1.8674e-01
23-02-02 00:49:07.979 - INFO: <epoch: 18, iter:   1,900> l_pix: 1.8272e-01
23-02-02 00:49:22.266 - INFO: <epoch: 18, iter:   1,950> l_pix: 2.1415e-01
23-02-02 00:49:37.346 - INFO: <epoch: 19, iter:   2,000> l_pix: 2.1144e-01
23-02-02 00:49:51.588 - INFO: <epoch: 19, iter:   2,050> l_pix: 1.7756e-01
23-02-02 00:50:06.833 - INFO: <epoch: 20, iter:   2,100> l_pix: 1.7769e-01
23-02-02 00:50:21.195 - INFO: <epoch: 20, iter:   2,150> l_pix: 1.7365e-01
23-02-02 00:50:35.350 - INFO: <epoch: 20, iter:   2,200> l_pix: 1.8140e-01
23-02-02 00:50:51.249 - INFO: <epoch: 21, iter:   2,250> l_pix: 1.7544e-01
23-02-02 00:51:06.201 - INFO: <epoch: 21, iter:   2,300> l_pix: 1.6536e-01
23-02-02 00:51:21.419 - INFO: <epoch: 22, iter:   2,350> l_pix: 1.7964e-01
23-02-02 00:51:35.643 - INFO: <epoch: 22, iter:   2,400> l_pix: 1.9889e-01
23-02-02 00:51:50.707 - INFO: <epoch: 23, iter:   2,450> l_pix: 1.6997e-01
23-02-02 00:52:04.907 - INFO: <epoch: 23, iter:   2,500> l_pix: 1.6478e-01
23-02-02 00:52:19.916 - INFO: <epoch: 24, iter:   2,550> l_pix: 1.6257e-01
23-02-02 00:52:34.796 - INFO: <epoch: 24, iter:   2,600> l_pix: 1.5949e-01
23-02-02 00:52:50.632 - INFO: <epoch: 25, iter:   2,650> l_pix: 1.6146e-01
23-02-02 00:53:05.007 - INFO: <epoch: 25, iter:   2,700> l_pix: 1.9634e-01
23-02-02 00:53:19.155 - INFO: <epoch: 25, iter:   2,750> l_pix: 1.6242e-01
23-02-02 00:53:35.222 - INFO: <epoch: 26, iter:   2,800> l_pix: 1.7114e-01
23-02-02 00:53:50.289 - INFO: <epoch: 26, iter:   2,850> l_pix: 3.6879e-01
23-02-02 00:54:06.107 - INFO: <epoch: 27, iter:   2,900> l_pix: 1.5077e-01
23-02-02 00:54:20.305 - INFO: <epoch: 27, iter:   2,950> l_pix: 1.4779e-01
23-02-02 00:54:35.889 - INFO: <epoch: 28, iter:   3,000> l_pix: 1.5504e-01
23-02-02 00:54:50.907 - INFO: <epoch: 28, iter:   3,050> l_pix: 1.5920e-01
23-02-02 00:55:06.061 - INFO: <epoch: 29, iter:   3,100> l_pix: 1.5379e-01
23-02-02 00:55:20.401 - INFO: <epoch: 29, iter:   3,150> l_pix: 1.4500e-01
23-02-02 00:55:35.662 - INFO: <epoch: 30, iter:   3,200> l_pix: 1.4477e-01
23-02-02 00:55:49.867 - INFO: <epoch: 30, iter:   3,250> l_pix: 1.5094e-01
23-02-02 00:56:04.037 - INFO: <epoch: 30, iter:   3,300> l_pix: 1.5799e-01
23-02-02 00:56:19.189 - INFO: <epoch: 31, iter:   3,350> l_pix: 1.4223e-01
23-02-02 00:56:33.431 - INFO: <epoch: 31, iter:   3,400> l_pix: 1.4428e-01
23-02-02 00:56:48.743 - INFO: <epoch: 32, iter:   3,450> l_pix: 2.0795e-01
23-02-02 00:57:02.948 - INFO: <epoch: 32, iter:   3,500> l_pix: 1.3630e-01
23-02-02 00:57:18.108 - INFO: <epoch: 33, iter:   3,550> l_pix: 1.4459e-01
23-02-02 00:57:32.709 - INFO: <epoch: 33, iter:   3,600> l_pix: 1.5719e-01
23-02-02 00:57:47.887 - INFO: <epoch: 34, iter:   3,650> l_pix: 1.3598e-01
23-02-02 00:58:02.466 - INFO: <epoch: 34, iter:   3,700> l_pix: 1.4175e-01
23-02-02 00:58:17.545 - INFO: <epoch: 35, iter:   3,750> l_pix: 1.3570e-01
23-02-02 00:58:31.838 - INFO: <epoch: 35, iter:   3,800> l_pix: 1.3355e-01
23-02-02 00:58:46.045 - INFO: <epoch: 35, iter:   3,850> l_pix: 3.1271e-01
23-02-02 00:59:01.893 - INFO: <epoch: 36, iter:   3,900> l_pix: 1.8322e-01
23-02-02 00:59:16.455 - INFO: <epoch: 36, iter:   3,950> l_pix: 1.3670e-01
23-02-02 00:59:31.518 - INFO: <epoch: 37, iter:   4,000> l_pix: 1.4302e-01
23-02-02 00:59:45.804 - INFO: <epoch: 37, iter:   4,050> l_pix: 1.3480e-01
23-02-02 01:00:00.940 - INFO: <epoch: 38, iter:   4,100> l_pix: 1.3262e-01
23-02-02 01:00:15.220 - INFO: <epoch: 38, iter:   4,150> l_pix: 1.3110e-01
23-02-02 01:00:30.348 - INFO: <epoch: 39, iter:   4,200> l_pix: 1.2999e-01
23-02-02 01:00:44.617 - INFO: <epoch: 39, iter:   4,250> l_pix: 1.3185e-01
23-02-02 01:00:59.647 - INFO: <epoch: 40, iter:   4,300> l_pix: 1.2932e-01
23-02-02 01:01:13.841 - INFO: <epoch: 40, iter:   4,350> l_pix: 1.2807e-01
23-02-02 01:01:28.001 - INFO: <epoch: 40, iter:   4,400> l_pix: 1.3126e-01
23-02-02 01:01:43.109 - INFO: <epoch: 41, iter:   4,450> l_pix: 2.9485e-01
23-02-02 01:01:57.322 - INFO: <epoch: 41, iter:   4,500> l_pix: 1.2706e-01
23-02-02 01:02:12.353 - INFO: <epoch: 42, iter:   4,550> l_pix: 1.3920e-01
23-02-02 01:02:26.573 - INFO: <epoch: 42, iter:   4,600> l_pix: 1.2373e-01
23-02-02 01:02:41.794 - INFO: <epoch: 43, iter:   4,650> l_pix: 1.2033e-01
23-02-02 01:02:56.089 - INFO: <epoch: 43, iter:   4,700> l_pix: 1.2243e-01
23-02-02 01:03:11.202 - INFO: <epoch: 44, iter:   4,750> l_pix: 1.3533e-01
23-02-02 01:03:25.506 - INFO: <epoch: 44, iter:   4,800> l_pix: 1.1851e-01
23-02-02 01:03:40.549 - INFO: <epoch: 45, iter:   4,850> l_pix: 1.2785e-01
23-02-02 01:03:54.848 - INFO: <epoch: 45, iter:   4,900> l_pix: 1.2270e-01
23-02-02 01:04:09.032 - INFO: <epoch: 45, iter:   4,950> l_pix: 1.1942e-01
23-02-02 01:04:24.191 - INFO: <epoch: 46, iter:   5,000> l_pix: 1.1514e-01
23-02-02 01:04:38.439 - INFO: <epoch: 46, iter:   5,050> l_pix: 1.1928e-01
23-02-02 01:04:53.592 - INFO: <epoch: 47, iter:   5,100> l_pix: 1.2485e-01
23-02-02 01:05:07.821 - INFO: <epoch: 47, iter:   5,150> l_pix: 1.1714e-01
23-02-02 01:05:23.003 - INFO: <epoch: 48, iter:   5,200> l_pix: 1.4058e-01
23-02-02 01:05:37.257 - INFO: <epoch: 48, iter:   5,250> l_pix: 2.1433e-01
23-02-02 01:05:52.292 - INFO: <epoch: 49, iter:   5,300> l_pix: 1.1818e-01
23-02-02 01:06:06.561 - INFO: <epoch: 49, iter:   5,350> l_pix: 1.1581e-01
23-02-02 01:06:21.688 - INFO: <epoch: 50, iter:   5,400> l_pix: 1.1308e-01
23-02-02 01:06:35.986 - INFO: <epoch: 50, iter:   5,450> l_pix: 1.1713e-01
23-02-02 01:06:50.249 - INFO: <epoch: 50, iter:   5,500> l_pix: 1.1421e-01
23-02-02 01:07:05.392 - INFO: <epoch: 51, iter:   5,550> l_pix: 1.2532e-01
23-02-02 01:07:19.677 - INFO: <epoch: 51, iter:   5,600> l_pix: 1.1149e-01
23-02-02 01:07:34.792 - INFO: <epoch: 52, iter:   5,650> l_pix: 1.1694e-01
23-02-02 01:07:48.960 - INFO: <epoch: 52, iter:   5,700> l_pix: 1.1292e-01
23-02-02 01:08:04.097 - INFO: <epoch: 53, iter:   5,750> l_pix: 2.2587e-01
23-02-02 01:08:18.446 - INFO: <epoch: 53, iter:   5,800> l_pix: 1.1277e-01
23-02-02 01:08:33.609 - INFO: <epoch: 54, iter:   5,850> l_pix: 1.0908e-01
23-02-02 01:08:47.787 - INFO: <epoch: 54, iter:   5,900> l_pix: 1.2173e-01
23-02-02 01:09:02.737 - INFO: <epoch: 55, iter:   5,950> l_pix: 1.1423e-01
23-02-02 01:09:16.977 - INFO: <epoch: 55, iter:   6,000> l_pix: 1.1348e-01
23-02-02 01:09:31.149 - INFO: <epoch: 55, iter:   6,050> l_pix: 1.1287e-01
23-02-02 01:09:46.403 - INFO: <epoch: 56, iter:   6,100> l_pix: 1.1550e-01
23-02-02 01:10:00.620 - INFO: <epoch: 56, iter:   6,150> l_pix: 2.7484e-01
23-02-02 01:10:15.754 - INFO: <epoch: 57, iter:   6,200> l_pix: 1.1043e-01
23-02-02 01:10:30.067 - INFO: <epoch: 57, iter:   6,250> l_pix: 1.1716e-01
23-02-02 01:10:45.141 - INFO: <epoch: 58, iter:   6,300> l_pix: 1.9925e-01
23-02-02 01:10:59.372 - INFO: <epoch: 58, iter:   6,350> l_pix: 1.1031e-01
23-02-02 01:11:14.451 - INFO: <epoch: 59, iter:   6,400> l_pix: 1.3328e-01
23-02-02 01:11:28.668 - INFO: <epoch: 59, iter:   6,450> l_pix: 1.7800e-01
23-02-02 01:11:43.750 - INFO: <epoch: 60, iter:   6,500> l_pix: 1.0628e-01
23-02-02 01:11:57.985 - INFO: <epoch: 60, iter:   6,550> l_pix: 1.0420e-01
23-02-02 01:12:12.160 - INFO: <epoch: 60, iter:   6,600> l_pix: 1.2686e-01
23-02-02 01:12:27.378 - INFO: <epoch: 61, iter:   6,650> l_pix: 1.8615e-01
23-02-02 01:12:41.635 - INFO: <epoch: 61, iter:   6,700> l_pix: 1.0423e-01
23-02-02 01:12:56.700 - INFO: <epoch: 62, iter:   6,750> l_pix: 4.3633e-01
23-02-02 01:13:10.892 - INFO: <epoch: 62, iter:   6,800> l_pix: 1.0927e-01
23-02-02 01:13:25.963 - INFO: <epoch: 63, iter:   6,850> l_pix: 1.0551e-01
23-02-02 01:13:40.230 - INFO: <epoch: 63, iter:   6,900> l_pix: 1.0329e-01
23-02-02 01:13:55.310 - INFO: <epoch: 64, iter:   6,950> l_pix: 1.3749e-01
23-02-02 01:14:09.538 - INFO: <epoch: 64, iter:   7,000> l_pix: 1.0359e-01
23-02-02 01:14:24.552 - INFO: <epoch: 65, iter:   7,050> l_pix: 1.0022e-01
23-02-02 01:14:38.770 - INFO: <epoch: 65, iter:   7,100> l_pix: 1.1877e-01
23-02-02 01:14:52.921 - INFO: <epoch: 65, iter:   7,150> l_pix: 1.0093e-01
23-02-02 01:15:08.049 - INFO: <epoch: 66, iter:   7,200> l_pix: 1.0186e-01
23-02-02 01:15:22.229 - INFO: <epoch: 66, iter:   7,250> l_pix: 1.2784e-01
23-02-02 01:15:37.325 - INFO: <epoch: 67, iter:   7,300> l_pix: 1.0968e-01
23-02-02 01:15:51.568 - INFO: <epoch: 67, iter:   7,350> l_pix: 1.4902e-01
23-02-02 01:16:06.663 - INFO: <epoch: 68, iter:   7,400> l_pix: 9.7302e-02
23-02-02 01:16:20.892 - INFO: <epoch: 68, iter:   7,450> l_pix: 1.7049e-01
23-02-02 01:16:35.992 - INFO: <epoch: 69, iter:   7,500> l_pix: 2.3116e-01
23-02-02 01:16:50.202 - INFO: <epoch: 69, iter:   7,550> l_pix: 1.2334e-01
23-02-02 01:17:05.258 - INFO: <epoch: 70, iter:   7,600> l_pix: 9.7277e-02
23-02-02 01:17:19.627 - INFO: <epoch: 70, iter:   7,650> l_pix: 1.2975e-01
23-02-02 01:17:33.896 - INFO: <epoch: 70, iter:   7,700> l_pix: 9.5993e-02
23-02-02 01:17:48.992 - INFO: <epoch: 71, iter:   7,750> l_pix: 9.8223e-02
23-02-02 01:18:03.291 - INFO: <epoch: 71, iter:   7,800> l_pix: 9.9124e-02
23-02-02 01:18:18.379 - INFO: <epoch: 72, iter:   7,850> l_pix: 9.6959e-02
23-02-02 01:18:32.563 - INFO: <epoch: 72, iter:   7,900> l_pix: 1.3383e-01
23-02-02 01:18:47.706 - INFO: <epoch: 73, iter:   7,950> l_pix: 1.4237e-01
23-02-02 01:19:02.071 - INFO: <epoch: 73, iter:   8,000> l_pix: 8.3253e-01
23-02-02 01:19:17.193 - INFO: <epoch: 74, iter:   8,050> l_pix: 9.8653e-02
23-02-02 01:19:31.480 - INFO: <epoch: 74, iter:   8,100> l_pix: 9.9223e-02
23-02-02 01:19:46.545 - INFO: <epoch: 75, iter:   8,150> l_pix: 9.7740e-02
23-02-02 01:20:00.730 - INFO: <epoch: 75, iter:   8,200> l_pix: 9.8020e-02
23-02-02 01:20:14.923 - INFO: <epoch: 75, iter:   8,250> l_pix: 9.6667e-02
23-02-02 01:20:30.054 - INFO: <epoch: 76, iter:   8,300> l_pix: 9.3552e-02
23-02-02 01:20:44.275 - INFO: <epoch: 76, iter:   8,350> l_pix: 1.3251e-01
23-02-02 01:20:59.445 - INFO: <epoch: 77, iter:   8,400> l_pix: 1.1001e-01
23-02-02 01:21:13.674 - INFO: <epoch: 77, iter:   8,450> l_pix: 9.5769e-02
23-02-02 01:21:28.754 - INFO: <epoch: 78, iter:   8,500> l_pix: 9.9096e-02
23-02-02 01:21:42.992 - INFO: <epoch: 78, iter:   8,550> l_pix: 9.3265e-02
23-02-02 01:21:58.040 - INFO: <epoch: 79, iter:   8,600> l_pix: 9.3451e-02
23-02-02 01:22:12.290 - INFO: <epoch: 79, iter:   8,650> l_pix: 9.2465e-02
23-02-02 01:22:27.468 - INFO: <epoch: 80, iter:   8,700> l_pix: 9.2664e-02
23-02-02 01:22:41.808 - INFO: <epoch: 80, iter:   8,750> l_pix: 9.4273e-02
23-02-02 01:22:56.044 - INFO: <epoch: 80, iter:   8,800> l_pix: 9.0701e-02
23-02-02 01:23:11.260 - INFO: <epoch: 81, iter:   8,850> l_pix: 9.3163e-02
23-02-02 01:23:25.561 - INFO: <epoch: 81, iter:   8,900> l_pix: 9.3418e-02
23-02-02 01:23:40.757 - INFO: <epoch: 82, iter:   8,950> l_pix: 9.1602e-02
23-02-02 01:23:55.097 - INFO: <epoch: 82, iter:   9,000> l_pix: 9.1335e-02
23-02-02 01:24:10.240 - INFO: <epoch: 83, iter:   9,050> l_pix: 8.9290e-02
23-02-02 01:24:24.457 - INFO: <epoch: 83, iter:   9,100> l_pix: 1.0465e-01
23-02-02 01:24:39.655 - INFO: <epoch: 84, iter:   9,150> l_pix: 8.9899e-02
23-02-02 01:24:53.895 - INFO: <epoch: 84, iter:   9,200> l_pix: 1.7984e-01
23-02-02 01:25:08.967 - INFO: <epoch: 85, iter:   9,250> l_pix: 9.4440e-02
23-02-02 01:25:23.298 - INFO: <epoch: 85, iter:   9,300> l_pix: 9.8430e-02
23-02-02 01:25:37.519 - INFO: <epoch: 85, iter:   9,350> l_pix: 8.9867e-02
23-02-02 01:25:52.711 - INFO: <epoch: 86, iter:   9,400> l_pix: 9.2254e-02
23-02-02 01:26:07.019 - INFO: <epoch: 86, iter:   9,450> l_pix: 8.9353e-02
23-02-02 01:26:22.186 - INFO: <epoch: 87, iter:   9,500> l_pix: 1.0435e-01
23-02-02 01:26:36.503 - INFO: <epoch: 87, iter:   9,550> l_pix: 6.0697e-01
23-02-02 01:26:51.660 - INFO: <epoch: 88, iter:   9,600> l_pix: 9.1040e-02
23-02-02 01:27:06.001 - INFO: <epoch: 88, iter:   9,650> l_pix: 9.0798e-02
23-02-02 01:27:21.177 - INFO: <epoch: 89, iter:   9,700> l_pix: 9.2277e-02
23-02-02 01:27:35.431 - INFO: <epoch: 89, iter:   9,750> l_pix: 9.0595e-02
23-02-02 01:27:50.575 - INFO: <epoch: 90, iter:   9,800> l_pix: 8.6840e-02
23-02-02 01:28:04.890 - INFO: <epoch: 90, iter:   9,850> l_pix: 8.8736e-02
23-02-02 01:28:19.146 - INFO: <epoch: 90, iter:   9,900> l_pix: 2.2369e-01
23-02-02 01:28:34.293 - INFO: <epoch: 91, iter:   9,950> l_pix: 8.9316e-02
23-02-02 01:28:48.513 - INFO: <epoch: 91, iter:  10,000> l_pix: 9.2611e-02















sampling loop time step: 100%|████████████████████████████████████████████████████████████████████████████| 2000/2000 [00:31<00:00, 64.16it/s]
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 143, in <module>
    wandb_logger.log_image(
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/core/wandb_logger.py", line 60, in log_image
    self._wandb.log({key_name: self._wandb.Image(image_array)})
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 153, in __init__
    self._initialize_from_data(data_or_path, mode)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 282, in _initialize_from_data
    self.to_uint8(data), mode=mode or self.guess_mode(data)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 428, in guess_mode
    raise ValueError(
ValueError: Un-supported shape for image conversion [2, 128, 384]
Traceback (most recent call last):
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/sr.py", line 143, in <module>
    wandb_logger.log_image(
  File "/home/rkurinch/Image-Super-Resolution-via-Iterative-Refinement/core/wandb_logger.py", line 60, in log_image
    self._wandb.log({key_name: self._wandb.Image(image_array)})
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 153, in __init__
    self._initialize_from_data(data_or_path, mode)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 282, in _initialize_from_data
    self.to_uint8(data), mode=mode or self.guess_mode(data)
  File "/home/rkurinch/.local/lib/python3.10/site-packages/wandb/sdk/data_types/image.py", line 428, in guess_mode
    raise ValueError(
ValueError: Un-supported shape for image conversion [2, 128, 384]